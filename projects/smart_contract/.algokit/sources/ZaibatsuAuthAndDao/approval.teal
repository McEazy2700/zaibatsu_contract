#pragma version 10

smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:13
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    method "hello(string)string"
    method "create()bool"
    method "update()bool"
    method "delete()bool"
    method "set_service_contract_address(address)bool"
    method "create_zaibatsu_token()uint64"
    method "authorize_pool_creation(axfer,application)bool"
    method "fund_pool(uint64,account,application,asset,axfer)(uint64,uint64,bool)"
    method "approve_pool_vote(axfer)(uint64,string)"
    method "opt_contract_into_asset(asset)bool"
    method "transfer_asset(asset,uint64,account)bool"
    txna ApplicationArgs 0
    match main_hello_route@3 main_create_route@4 main_update_route@5 main_delete_route@6 main_set_service_contract_address_route@7 main_create_zaibatsu_token_route@8 main_authorize_pool_creation_route@9 main_fund_pool_route@10 main_approve_pool_vote_route@11 main_opt_contract_into_asset_route@12 main_transfer_asset_route@13
    err // reject transaction

main_hello_route@3:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:17
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:13
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txna ApplicationArgs 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:17
    // @a4.abimethod()
    callsub hello
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_create_route@4:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:21
    // @a4.abimethod(create="allow")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    callsub create
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_update_route@5:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:26
    // @a4.abimethod(allow_actions=["UpdateApplication"])
    txn OnCompletion
    int UpdateApplication
    ==
    assert // OnCompletion is UpdateApplication
    txn ApplicationID
    assert // is not creating
    callsub update
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_delete_route@6:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:35
    // @a4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub delete
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_set_service_contract_address_route@7:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:41
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:13
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txna ApplicationArgs 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:41
    // @a4.abimethod()
    callsub set_service_contract_address
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_create_zaibatsu_token_route@8:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:47
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub create_zaibatsu_token
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_authorize_pool_creation_route@9:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:52
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:13
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Applications
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:52
    // @a4.abimethod()
    callsub authorize_pool_creation
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_fund_pool_route@10:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:67
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:13
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    txnas Applications
    txna ApplicationArgs 4
    btoi
    txnas Assets
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:67
    // @a4.abimethod()
    callsub fund_pool
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_approve_pool_vote_route@11:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:107
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:13
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:107
    // @a4.abimethod()
    callsub approve_pool_vote
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_opt_contract_into_asset_route@12:
    // smart_contracts/zaibatsu_base/contract.py:36
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:13
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/zaibatsu_base/contract.py:36
    // @a4.abimethod()
    callsub opt_contract_into_asset
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_transfer_asset_route@13:
    // smart_contracts/zaibatsu_base/contract.py:41
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:13
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txnas Accounts
    // smart_contracts/zaibatsu_base/contract.py:41
    // @a4.abimethod()
    callsub transfer_asset
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.hello(name: bytes) -> bytes:
hello:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:17-18
    // @a4.abimethod()
    // def hello(self, name: a4.String) -> a4.String:
    proto 1 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:19
    // return "Hello, " + name
    frame_dig -1
    extract 2 0
    byte 0x48656c6c6f2c20
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.create() -> uint64:
create:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:21-22
    // @a4.abimethod(create="allow")
    // def create(self) -> bool:
    proto 0 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:23
    // self.admins.append(a4.Address(ap.Txn.sender))
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:23
    // self.admins.append(a4.Address(ap.Txn.sender))
    app_global_get_ex
    assert // check self.admins exists
    extract 2 0
    txn Sender
    concat
    dup
    len
    int 32
    /
    itob
    extract 6 2
    swap
    concat
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:23
    // self.admins.append(a4.Address(ap.Txn.sender))
    swap
    app_global_put
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:24
    // return True
    int 1
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.update() -> uint64:
update:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:26-27
    // @a4.abimethod(allow_actions=["UpdateApplication"])
    // def update(self) -> bool:
    proto 0 1
    byte ""
    dup
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:28
    // if ap.Txn.sender == op.Global.creator_address:
    txn Sender
    global CreatorAddress
    ==
    bz update_after_if_else@2
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:29
    // return True
    int 1
    frame_bury 0
    retsub

update_after_if_else@2:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:30
    // for index in ap.urange(self.admins.length):
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:30
    // for index in ap.urange(self.admins.length):
    app_global_get_ex
    assert // check self.admins exists
    int 0
    extract_uint16
    frame_bury 1
    int 0
    frame_bury 0

update_for_header@3:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:30
    // for index in ap.urange(self.admins.length):
    frame_dig 0
    frame_dig 1
    <
    bz update_after_for@9
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:31
    // if self.admins[index] == ap.Txn.sender:
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:31
    // if self.admins[index] == ap.Txn.sender:
    app_global_get_ex
    assert // check self.admins exists
    extract 2 0
    frame_dig 0
    int 32
    *
    int 32
    extract3 // on error: Index access is out of bounds
    txn Sender
    ==
    bz update_after_if_else@6
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:32
    // return True
    int 1
    frame_bury 0
    retsub

update_after_if_else@6:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:30
    // for index in ap.urange(self.admins.length):
    frame_dig 0
    int 1
    +
    frame_bury 0
    b update_for_header@3

update_after_for@9:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:33
    // return False
    int 0
    frame_bury 0
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.delete() -> uint64:
delete:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:35-36
    // @a4.abimethod(allow_actions=["DeleteApplication"])
    // def delete(self) -> bool:
    proto 0 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:37
    // if ap.Txn.sender == op.Global.creator_address:
    txn Sender
    global CreatorAddress
    ==
    bz delete_after_if_else@2
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:38
    // return True
    int 1
    retsub

delete_after_if_else@2:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:39
    // return False
    int 0
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.set_service_contract_address(address: bytes) -> uint64:
set_service_contract_address:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:41-42
    // @a4.abimethod()
    // def set_service_contract_address(self, address: a4.Address) -> bool:
    proto 1 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:43
    // self.authorise_txn()
    callsub authorise_txn
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:44
    // self.service_contract_address = address
    byte "service_contract_address"
    frame_dig -1
    app_global_put
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:45
    // return True
    int 1
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.authorise_txn() -> void:
authorise_txn:
    // smart_contracts/zaibatsu_base/contract.py:68-69
    // @ap.subroutine
    // def authorise_txn(self) -> None:
    proto 0 0
    byte ""
    dup
    // smart_contracts/zaibatsu_base/contract.py:70
    // is_authorised = a4.Bool()
    byte 0x00
    // smart_contracts/zaibatsu_base/contract.py:71
    // if ap.Txn.sender == op.Global.creator_address:
    txn Sender
    global CreatorAddress
    ==
    bz authorise_txn_else_body@2
    // smart_contracts/zaibatsu_base/contract.py:72
    // is_authorised = a4.Bool(True)  # noqa: FBT003
    byte 0x80
    frame_bury 2
    b authorise_txn_after_if_else@10

authorise_txn_else_body@2:
    // smart_contracts/zaibatsu_base/contract.py:74
    // for index in ap.urange(self.admins.length):
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_base/contract.py:74
    // for index in ap.urange(self.admins.length):
    app_global_get_ex
    assert // check self.admins exists
    int 0
    extract_uint16
    frame_bury 1
    int 0
    frame_bury 0

authorise_txn_for_header@3:
    // smart_contracts/zaibatsu_base/contract.py:74
    // for index in ap.urange(self.admins.length):
    frame_dig 0
    frame_dig 1
    <
    bz authorise_txn_after_if_else@10
    // smart_contracts/zaibatsu_base/contract.py:75
    // if self.admins[index] == ap.Txn.sender:
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_base/contract.py:75
    // if self.admins[index] == ap.Txn.sender:
    app_global_get_ex
    assert // check self.admins exists
    extract 2 0
    frame_dig 0
    int 32
    *
    int 32
    extract3 // on error: Index access is out of bounds
    txn Sender
    ==
    bz authorise_txn_after_if_else@6
    // smart_contracts/zaibatsu_base/contract.py:76
    // is_authorised = a4.Bool(True)  # noqa: FBT003
    byte 0x80
    frame_bury 2

authorise_txn_after_if_else@6:
    // smart_contracts/zaibatsu_base/contract.py:74
    // for index in ap.urange(self.admins.length):
    frame_dig 0
    int 1
    +
    frame_bury 0
    b authorise_txn_for_header@3

authorise_txn_after_if_else@10:
    // smart_contracts/zaibatsu_base/contract.py:77
    // assert is_authorised, "You are not authorised to perform this action"
    frame_dig 2
    byte 0x00
    !=
    assert // You are not authorised to perform this action
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.create_zaibatsu_token() -> bytes:
create_zaibatsu_token:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:47-48
    // @a4.abimethod()
    // def create_zaibatsu_token(self) -> a4.UInt64:
    proto 0 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:49
    // self.handle_create_zai_token()
    callsub handle_create_zai_token
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:50
    // return self.get_zai_token()
    callsub get_zai_token
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.handle_create_zai_token() -> void:
handle_create_zai_token:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:121-122
    // @ap.subroutine
    // def handle_create_zai_token(self) -> None:
    proto 0 0
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:123
    // box = op.Box.get(b"zai")
    byte 0x7a6169
    box_get
    bury 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:124
    // if not box[1]:
    bnz handle_create_zai_token_after_if_else@3
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:131
    // manager=ap.Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:132-134
    // reserve=ap.Global.current_application_address,
    // freeze=ap.Global.current_application_address,
    // clawback=ap.Global.current_application_address,
    dupn 3
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:136
    // asset_txn.submit()
    itxn_begin
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:130
    // asset_name="ZAI",
    byte "ZAI"
    itxn_field ConfigAssetName
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:129
    // unit_name="ZAI",
    byte "ZAI"
    itxn_field ConfigAssetUnitName
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:128
    // url="https://res.cloudinary.com/dev-media/image/upload/v1722011867/Zaibatsu_z_1234_Circle_yjt49c.png",
    byte "https://res.cloudinary.com/dev-media/image/upload/v1722011867/Zaibatsu_z_1234_Circle_yjt49c.png"
    itxn_field ConfigAssetURL
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:127
    // total=10000000000000000,
    int 10000000000000000
    itxn_field ConfigAssetTotal
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:125
    // asset_txn = ap.itxn.AssetConfig(
    int acfg
    itxn_field TypeEnum
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:126
    // fee=1000,
    int 1000
    itxn_field Fee
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:136
    // asset_txn.submit()
    itxn_submit
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:137
    // asset_id = op.ITxn.created_asset_id().id
    itxn CreatedAssetID
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:138
    // op.Box.put(b"zai", a4.UInt64(asset_id).bytes)
    itob
    byte 0x7a6169
    swap
    box_put

handle_create_zai_token_after_if_else@3:
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.get_zai_token() -> bytes:
get_zai_token:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:140-141
    // @ap.subroutine
    // def get_zai_token(self) -> a4.UInt64:
    proto 0 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:142
    // box_data, exists = op.Box.get(b"zai")
    byte 0x7a6169
    box_get
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:144
    // if not exists:
    bnz get_zai_token_else_body@2
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:145
    // self.handle_create_zai_token()
    callsub handle_create_zai_token
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:146
    // box_data, exists = op.Box.get(b"zai")
    byte 0x7a6169
    box_get
    pop
    b get_zai_token_after_if_else@3

get_zai_token_else_body@2:
    frame_dig 0

get_zai_token_after_if_else@3:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:150
    // return zai_asset_id
    swap
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.authorize_pool_creation(txn: uint64, folks_feed_oracle: uint64) -> uint64:
authorize_pool_creation:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:52-57
    // @a4.abimethod()
    // def authorize_pool_creation(
    //     self,
    //     txn: gtxn.AssetTransferTransaction,
    //     folks_feed_oracle: ap.Application,
    // ) -> bool:
    proto 2 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:59
    // txn.asset_receiver == self.service_contract_address.native
    frame_dig -2
    gtxns AssetReceiver
    int 0
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:44
    // self.service_contract_address = address
    byte "service_contract_address"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:59
    // txn.asset_receiver == self.service_contract_address.native
    app_global_get_ex
    assert // check self.service_contract_address exists
    ==
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:58-60
    // assert (
    //     txn.asset_receiver == self.service_contract_address.native
    // ), "The asset_receiver mut be the ZaibatsuLoan account"
    assert // The asset_receiver mut be the ZaibatsuLoan account
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:62
    // asset_dollar_price = self.get_asset_price(folks_feed_oracle, txn.xfer_asset)
    frame_dig -2
    gtxns XferAsset
    frame_dig -1
    swap
    callsub get_asset_price
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:63
    // creation_fee = asset_dollar_price * txn.asset_amount
    frame_dig -2
    gtxns AssetAmount
    *
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:64
    // assert creation_fee >= ap.UInt64(20), "The asset_amount must be worth at least 20 dollars"
    int 20
    >=
    assert // The asset_amount must be worth at least 20 dollars
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:65
    // return True
    int 1
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.get_asset_price(folks_feed_oracle: uint64, asa: uint64) -> uint64:
get_asset_price:
    // smart_contracts/zaibatsu_base/contract.py:120-123
    // @ap.subroutine
    // def get_asset_price(
    //     self, folks_feed_oracle: ap.Application, asa: ap.Asset
    // ) -> ap.UInt64:
    proto 2 1
    // smart_contracts/zaibatsu_base/contract.py:124
    // [value, exists] = op.AppGlobal.get_ex_bytes(folks_feed_oracle, op.itob(asa.id))
    frame_dig -1
    itob
    frame_dig -2
    swap
    app_global_get_ex
    // smart_contracts/zaibatsu_base/contract.py:125
    // assert exists, "This aset is not supported"
    assert // This aset is not supported
    // smart_contracts/zaibatsu_base/contract.py:126
    // return op.extract_uint64(value, ap.UInt64(0))
    int 0
    extract_uint64
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.fund_pool(fund_amount: uint64, user_account: bytes, folks_feed_oracle: uint64, zai: uint64, txn: uint64) -> bytes:
fund_pool:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:67-75
    // @a4.abimethod()
    // def fund_pool(
    //     self,
    //     fund_amount: ap.UInt64,
    //     user_account: ap.Account,
    //     folks_feed_oracle: ap.Application,
    //     zai: ap.Asset,
    //     txn: gtxn.AssetTransferTransaction,
    // ) -> PoolFundResponse:
    proto 5 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:76
    // zai_asset_id = self.get_zai_token()
    callsub get_zai_token
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:78
    // assert zai.id == zai_asset_id.native, "The asset passed must be the zaibatsu asset"
    btoi
    frame_dig -2
    ==
    assert // The asset passed must be the zaibatsu asset
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:79
    // assert user_account == txn.sender, "The user account must be the same as the txn sender"
    frame_dig -1
    gtxns Sender
    frame_dig -4
    ==
    assert // The user account must be the same as the txn sender
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:81
    // asset_dollar_price = self.get_asset_price(folks_feed_oracle, txn.xfer_asset)
    frame_dig -1
    gtxns XferAsset
    frame_dig -3
    swap
    callsub get_asset_price
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:82
    // asset_amount = txn.asset_amount
    frame_dig -1
    gtxns AssetAmount
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:83
    // asset_value_in_usd = asset_amount // asset_dollar_price
    dup
    dig 2
    /
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:91
    // reward_txn.submit()
    itxn_begin
    frame_dig -2
    itxn_field XferAsset
    itxn_field AssetAmount
    frame_dig -4
    itxn_field AssetReceiver
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:86
    // note="Pool fund reward",
    byte "Pool fund reward"
    itxn_field Note
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:84
    // reward_txn = ap.itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:85
    // fee=1000,
    int 1000
    itxn_field Fee
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:91
    // reward_txn.submit()
    itxn_submit
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:94
    // txn.asset_receiver == self.service_contract_address.native
    frame_dig -1
    gtxns AssetReceiver
    int 0
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:44
    // self.service_contract_address = address
    byte "service_contract_address"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:94
    // txn.asset_receiver == self.service_contract_address.native
    app_global_get_ex
    assert // check self.service_contract_address exists
    ==
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:93-95
    // assert (
    //     txn.asset_receiver == self.service_contract_address.native
    // ), "The asset_receiver mut be the ZaibatsuService account"
    assert // The asset_receiver mut be the ZaibatsuService account
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:97
    // amount_plus_transaction_fee = self.calculate_amt_plus_fee(fund_amount, ap.UInt64(1))
    frame_dig -5
    int 1
    callsub calculate_amt_plus_fee
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:98
    // assert txn.asset_amount >= amount_plus_transaction_fee, "The txn amount is insufficient"
    >=
    assert // The txn amount is insufficient
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:101
    // amount=a4.UInt64(fund_amount),
    frame_dig -5
    itob
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:103
    // asset_price=a4.UInt64(asset_dollar_price),
    swap
    itob
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:100-104
    // response = PoolFundResponse(
    //     amount=a4.UInt64(fund_amount),
    //     success=a4.Bool(True),  # noqa: FBT003
    //     asset_price=a4.UInt64(asset_dollar_price),
    // )
    concat
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:102
    // success=a4.Bool(True),  # noqa: FBT003
    byte 0x80
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:100-104
    // response = PoolFundResponse(
    //     amount=a4.UInt64(fund_amount),
    //     success=a4.Bool(True),  # noqa: FBT003
    //     asset_price=a4.UInt64(asset_dollar_price),
    // )
    concat
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:105
    // return response
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.calculate_amt_plus_fee(amt: uint64, multiples: uint64) -> uint64:
calculate_amt_plus_fee:
    // smart_contracts/zaibatsu_base/contract.py:113-114
    // @ap.subroutine
    // def calculate_amt_plus_fee(self, amt: ap.UInt64, multiples: ap.UInt64) -> ap.UInt64:
    proto 2 1
    // smart_contracts/zaibatsu_base/contract.py:115
    // fee_percentage = ap.UInt64(10) * multiples
    int 10
    frame_dig -1
    *
    // smart_contracts/zaibatsu_base/contract.py:116
    // multiplied = fee_percentage * amt
    frame_dig -2
    *
    // smart_contracts/zaibatsu_base/contract.py:117
    // half_percent = multiplied // 1000
    int 1000
    /
    // smart_contracts/zaibatsu_base/contract.py:118
    // return half_percent
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.approve_pool_vote(txn: uint64) -> bytes:
approve_pool_vote:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:107-111
    // @a4.abimethod()
    // def approve_pool_vote(
    //     self,
    //     txn: gtxn.AssetTransferTransaction,
    // ) -> PoolVoteApprovalResponse:
    proto 1 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:112
    // zai_asset_id = self.get_zai_token()
    callsub get_zai_token
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:113
    // assert txn.xfer_asset.id == zai_asset_id.native, "The asset transfered must be the pool token"
    frame_dig -1
    gtxns XferAsset
    swap
    btoi
    ==
    assert // The asset transfered must be the pool token
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:116
    // multiplier=a4.UInt64(txn.asset_amount),
    frame_dig -1
    gtxns AssetAmount
    itob
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:117
    // txn_id=a4.String.from_bytes(txn.txn_id),
    frame_dig -1
    gtxns TxID
    swap
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:115-118
    // response = PoolVoteApprovalResponse(
    //     multiplier=a4.UInt64(txn.asset_amount),
    //     txn_id=a4.String.from_bytes(txn.txn_id),
    // )
    byte 0x000a
    concat
    swap
    concat
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:119
    // return response
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.opt_contract_into_asset(asset: uint64) -> uint64:
opt_contract_into_asset:
    // smart_contracts/zaibatsu_base/contract.py:36-37
    // @a4.abimethod()
    // def opt_contract_into_asset(self, asset: ap.Asset) -> bool:
    proto 1 1
    // smart_contracts/zaibatsu_base/contract.py:38
    // self.opt_app_into_asset(asset)
    frame_dig -1
    callsub opt_app_into_asset
    // smart_contracts/zaibatsu_base/contract.py:39
    // return True
    int 1
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.opt_app_into_asset(asset: uint64) -> void:
opt_app_into_asset:
    // smart_contracts/zaibatsu_base/contract.py:55-59
    // ################################################################
    // #####################   Subroutines    #########################
    // ################################################################
    // @ap.subroutine
    // def opt_app_into_asset(self, asset: ap.Asset) -> None:
    proto 1 0
    // smart_contracts/zaibatsu_base/contract.py:64
    // asset_receiver=ap.Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/zaibatsu_base/contract.py:66
    // txn.submit()
    itxn_begin
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/zaibatsu_base/contract.py:61
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    // smart_contracts/zaibatsu_base/contract.py:60
    // txn = ap.itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/zaibatsu_base/contract.py:62
    // fee=1000,
    int 1000
    itxn_field Fee
    // smart_contracts/zaibatsu_base/contract.py:66
    // txn.submit()
    itxn_submit
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.transfer_asset(asset: uint64, asset_amount: uint64, recipient: bytes) -> uint64:
transfer_asset:
    // smart_contracts/zaibatsu_base/contract.py:41-44
    // @a4.abimethod()
    // def transfer_asset(
    //     self, asset: ap.Asset, asset_amount: ap.UInt64, recipient: ap.Account
    // ) -> bool:
    proto 3 1
    // smart_contracts/zaibatsu_base/contract.py:45
    // self.authorise_txn()
    callsub authorise_txn
    // smart_contracts/zaibatsu_base/contract.py:52
    // txn.submit()
    itxn_begin
    frame_dig -2
    itxn_field AssetAmount
    frame_dig -1
    itxn_field AssetReceiver
    frame_dig -3
    itxn_field XferAsset
    // smart_contracts/zaibatsu_base/contract.py:46
    // txn = ap.itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/zaibatsu_base/contract.py:47
    // fee=1000,
    int 1000
    itxn_field Fee
    // smart_contracts/zaibatsu_base/contract.py:52
    // txn.submit()
    itxn_submit
    // smart_contracts/zaibatsu_base/contract.py:53
    // return True
    int 1
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.__init__() -> void:
__init__:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:14
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:15
    // self.zai_token_asset_id: a4.UInt64 = a4.UInt64()
    byte "zai_token_asset_id"
    byte 0x0000000000000000
    app_global_put
    retsub