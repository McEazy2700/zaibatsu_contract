{
    "hints": {
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create()bool": {
            "call_config": {
                "no_op": "ALL"
            }
        },
        "update()bool": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete()bool": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "set_service_contract_address(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "authorize_pool_creation(axfer,application,uint64)(uint64,bool)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolFundResponse",
                    "elements": [
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "success",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "fund_pool(axfer)(uint64,bool)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolFundResponse",
                    "elements": [
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "success",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "opt_contract_into_asset(asset)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3VfYXV0aG9yaXphdGlvbl9hbmRfZGFvLmNvbnRyYWN0LlphaWJhdHN1QXV0aG9yaXphdGlvbkFuZERhby5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X2F1dGhvcml6YXRpb25fYW5kX2Rhby9jb250cmFjdC5weToxMAogICAgLy8gY2xhc3MgWmFpYmF0c3VBdXRob3JpemF0aW9uQW5kRGFvKFphaWJhdHN1QmFzZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admins": {
                    "type": "bytes",
                    "key": "admins"
                },
                "service_contract": {
                    "type": "bytes",
                    "key": "service_contract"
                },
                "service_contract_address": {
                    "type": "bytes",
                    "key": "service_contract_address"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ZaibatsuAuthorizationAndDao",
        "methods": [
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "set_service_contract_address",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "authorize_pool_creation",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    },
                    {
                        "type": "application",
                        "name": "folks_feed_oracle"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_decimals_multiplier"
                    }
                ],
                "returns": {
                    "type": "(uint64,bool)"
                }
            },
            {
                "name": "fund_pool",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(uint64,bool)"
                }
            },
            {
                "name": "opt_contract_into_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}