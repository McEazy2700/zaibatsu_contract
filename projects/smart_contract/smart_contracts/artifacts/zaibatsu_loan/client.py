# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)": {
            "structs": {
                "loan_details": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_key",
                            "string"
                        ],
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_key",
                            "string"
                        ],
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)": {
            "structs": {
                "completion_args": {
                    "name": "CompleteLoanArgs",
                    "elements": [
                        [
                            "loan_unit_name",
                            "string"
                        ],
                        [
                            "lender_nft_image_url",
                            "string"
                        ],
                        [
                            "borrower_nft_image_url",
                            "string"
                        ],
                        [
                            "loan_hash",
                            "string"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_key",
                            "string"
                        ],
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)": {
            "structs": {
                "completion_args": {
                    "name": "CompleteLoanArgs",
                    "elements": [
                        [
                            "loan_unit_name",
                            "string"
                        ],
                        [
                            "lender_nft_image_url",
                            "string"
                        ],
                        [
                            "borrower_nft_image_url",
                            "string"
                        ],
                        [
                            "loan_hash",
                            "string"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_key",
                            "string"
                        ],
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "initiate_loan_repayment(byte[],string,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)": {
            "structs": {
                "payment_recipient": {
                    "name": "PaymentReciepient",
                    "elements": [
                        [
                            "payment_percentage",
                            "uint64"
                        ],
                        [
                            "recipient_address",
                            "address"
                        ]
                    ]
                },
                "output": {
                    "name": "ExecuteLoanRepaymentResponse",
                    "elements": [
                        [
                            "loan_repayment_complete",
                            "bool"
                        ],
                        [
                            "percentage_paid",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "clean_up_loan_repayment(string,account)(bool)": {
            "structs": {
                "output": {
                    "name": "CleanUpLoanRepaymentResponse",
                    "elements": [
                        [
                            "loan_repayment_complete",
                            "bool"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create()bool": {
            "call_config": {
                "no_op": "ALL"
            }
        },
        "update()bool": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete()bool": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "opt_contract_into_asset(asset)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3VfbG9hbi5jb250cmFjdC5aYWliYXRzdUxvYW4uY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9sb2FuL2NvbnRyYWN0LnB5OjE3CiAgICAvLyBjbGFzcyBaYWliYXRzdUxvYW4oWmFpYmF0c3VCYXNlKToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admins": {
                    "type": "bytes",
                    "key": "admins"
                },
                "service_contract": {
                    "type": "bytes",
                    "key": "service_contract"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ZaibatsuLoan",
        "methods": [
            {
                "name": "initiate_loan_purchase",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "application",
                        "name": "folks_feed_oracle"
                    },
                    {
                        "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)",
                        "name": "loan_details"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
                }
            },
            {
                "name": "complete_non_p2p_loan_purchase",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "(string,string,string,string)",
                        "name": "completion_args"
                    },
                    {
                        "type": "asset",
                        "name": "principal_asset"
                    },
                    {
                        "type": "account",
                        "name": "borrower"
                    }
                ],
                "returns": {
                    "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
                }
            },
            {
                "name": "complete_p2p_loan_purchase",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "(string,string,string,string)",
                        "name": "completion_args"
                    },
                    {
                        "type": "asset",
                        "name": "principal_asset"
                    },
                    {
                        "type": "account",
                        "name": "borrower"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
                }
            },
            {
                "name": "initiate_loan_repayment",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "string",
                        "name": "repayment_key"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "execute_loan_repayment",
                "args": [
                    {
                        "type": "string",
                        "name": "repayment_key"
                    },
                    {
                        "type": "account",
                        "name": "recipient_account"
                    },
                    {
                        "type": "(uint64,address)",
                        "name": "payment_recipient"
                    },
                    {
                        "type": "asset",
                        "name": "principal_asset"
                    }
                ],
                "returns": {
                    "type": "(bool,uint64)"
                }
            },
            {
                "name": "clean_up_loan_repayment",
                "args": [
                    {
                        "type": "string",
                        "name": "repayment_key"
                    },
                    {
                        "type": "account",
                        "name": "borrower_account"
                    }
                ],
                "returns": {
                    "type": "(bool)"
                }
            },
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "opt_contract_into_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {},
        "desc": "\n    ATTENTIONS!!!! THIS IS NOT A DRILL\n    * All percentages comming into the smart contract must have been multiple\n      by 100. This is to account for the lack of support for floats on the AVM\n    "
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data)
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class LoanDetails:
    loan_key: str
    loan_type: str
    tenure: int
    principal_asset_id: int
    collateral_asset_id: int
    interest_asset_amount: int
    principal_asset_amount: int
    collateral_asset_amount: int
    early_payment_penalty_amount: int
    payment_rounds: int
    payment_completion_timestamp: int
    payment_recipients: list[tuple[int, str]]
    collateral_paid: bool
    principal_paid: bool
    completed_payment_rounds: int
    borrower: str
    lender_nft_asser_id: int
    borrower_nft_asser_id: int


@dataclasses.dataclass(kw_only=True)
class InitiateLoanPurchaseArgs(_ArgsBase[LoanDetails]):
    loan_key: bytes | bytearray
    folks_feed_oracle: int
    loan_details: LoanDetails
    txn: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class CompleteLoanArgs:
    loan_unit_name: str
    lender_nft_image_url: str
    borrower_nft_image_url: str
    loan_hash: str


@dataclasses.dataclass(kw_only=True)
class CompleteNonP2PLoanPurchaseArgs(_ArgsBase[LoanDetails]):
    loan_key: bytes | bytearray
    completion_args: CompleteLoanArgs
    principal_asset: int
    borrower: str | bytes

    @staticmethod
    def method() -> str:
        return "complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class CompleteP2PLoanPurchaseArgs(_ArgsBase[LoanDetails]):
    loan_key: bytes | bytearray
    completion_args: CompleteLoanArgs
    principal_asset: int
    borrower: str | bytes
    txn: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"


@dataclasses.dataclass(kw_only=True)
class InitiateLoanRepaymentArgs(_ArgsBase[None]):
    loan_key: bytes | bytearray
    repayment_key: str
    txn: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "initiate_loan_repayment(byte[],string,axfer)void"


@dataclasses.dataclass(kw_only=True)
class PaymentReciepient:
    payment_percentage: int
    recipient_address: str


@dataclasses.dataclass(kw_only=True)
class ExecuteLoanRepaymentResponse:
    loan_repayment_complete: bool
    percentage_paid: int


@dataclasses.dataclass(kw_only=True)
class ExecuteLoanRepaymentArgs(_ArgsBase[ExecuteLoanRepaymentResponse]):
    repayment_key: str
    recipient_account: str | bytes
    payment_recipient: PaymentReciepient
    principal_asset: int

    @staticmethod
    def method() -> str:
        return "execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)"


@dataclasses.dataclass(kw_only=True)
class CleanUpLoanRepaymentResponse:
    loan_repayment_complete: bool


@dataclasses.dataclass(kw_only=True)
class CleanUpLoanRepaymentArgs(_ArgsBase[CleanUpLoanRepaymentResponse]):
    repayment_key: str
    borrower_account: str | bytes

    @staticmethod
    def method() -> str:
        return "clean_up_loan_repayment(string,account)(bool)"


@dataclasses.dataclass(kw_only=True)
class CreateArgs(_ArgsBase[bool]):
    @staticmethod
    def method() -> str:
        return "create()bool"


@dataclasses.dataclass(kw_only=True)
class OptContractIntoAssetArgs(_ArgsBase[bool]):
    asset: int

    @staticmethod
    def method() -> str:
        return "opt_contract_into_asset(asset)bool"


@dataclasses.dataclass(kw_only=True)
class UpdateArgs(_ArgsBase[bool]):
    @staticmethod
    def method() -> str:
        return "update()bool"


@dataclasses.dataclass(kw_only=True)
class DeleteArgs(_ArgsBase[bool]):
    @staticmethod
    def method() -> str:
        return "delete()bool"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.admins = ByteReader(typing.cast(bytes, data.get(b"admins")))
        self.service_contract = ByteReader(typing.cast(bytes, data.get(b"service_contract")))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def initiate_loan_purchase(
        self,
        *,
        loan_key: bytes | bytearray,
        folks_feed_oracle: int,
        loan_details: LoanDetails,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)` ABI method
        
        :param bytes | bytearray loan_key: The `loan_key` ABI parameter
        :param int folks_feed_oracle: The `folks_feed_oracle` ABI parameter
        :param LoanDetails loan_details: The `loan_details` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = InitiateLoanPurchaseArgs(
            loan_key=loan_key,
            folks_feed_oracle=folks_feed_oracle,
            loan_details=loan_details,
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def complete_non_p2p_loan_purchase(
        self,
        *,
        loan_key: bytes | bytearray,
        completion_args: CompleteLoanArgs,
        principal_asset: int,
        borrower: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)` ABI method
        
        :param bytes | bytearray loan_key: The `loan_key` ABI parameter
        :param CompleteLoanArgs completion_args: The `completion_args` ABI parameter
        :param int principal_asset: The `principal_asset` ABI parameter
        :param str | bytes borrower: The `borrower` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CompleteNonP2PLoanPurchaseArgs(
            loan_key=loan_key,
            completion_args=completion_args,
            principal_asset=principal_asset,
            borrower=borrower,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def complete_p2p_loan_purchase(
        self,
        *,
        loan_key: bytes | bytearray,
        completion_args: CompleteLoanArgs,
        principal_asset: int,
        borrower: str | bytes,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)` ABI method
        
        :param bytes | bytearray loan_key: The `loan_key` ABI parameter
        :param CompleteLoanArgs completion_args: The `completion_args` ABI parameter
        :param int principal_asset: The `principal_asset` ABI parameter
        :param str | bytes borrower: The `borrower` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CompleteP2PLoanPurchaseArgs(
            loan_key=loan_key,
            completion_args=completion_args,
            principal_asset=principal_asset,
            borrower=borrower,
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def initiate_loan_repayment(
        self,
        *,
        loan_key: bytes | bytearray,
        repayment_key: str,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `initiate_loan_repayment(byte[],string,axfer)void` ABI method
        
        :param bytes | bytearray loan_key: The `loan_key` ABI parameter
        :param str repayment_key: The `repayment_key` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = InitiateLoanRepaymentArgs(
            loan_key=loan_key,
            repayment_key=repayment_key,
            txn=txn,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def execute_loan_repayment(
        self,
        *,
        repayment_key: str,
        recipient_account: str | bytes,
        payment_recipient: PaymentReciepient,
        principal_asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)` ABI method
        
        :param str repayment_key: The `repayment_key` ABI parameter
        :param str | bytes recipient_account: The `recipient_account` ABI parameter
        :param PaymentReciepient payment_recipient: The `payment_recipient` ABI parameter
        :param int principal_asset: The `principal_asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = ExecuteLoanRepaymentArgs(
            repayment_key=repayment_key,
            recipient_account=recipient_account,
            payment_recipient=payment_recipient,
            principal_asset=principal_asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clean_up_loan_repayment(
        self,
        *,
        repayment_key: str,
        borrower_account: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `clean_up_loan_repayment(string,account)(bool)` ABI method
        
        :param str repayment_key: The `repayment_key` ABI parameter
        :param str | bytes borrower_account: The `borrower_account` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CleanUpLoanRepaymentArgs(
            repayment_key=repayment_key,
            borrower_account=borrower_account,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create()bool` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def opt_contract_into_asset(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `opt_contract_into_asset(asset)bool` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OptContractIntoAssetArgs(
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_create(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `create()bool` ABI method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CreateArgs()
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def update_update(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `update()bool` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = UpdateArgs()
        self.app_client.compose_update(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_delete(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `delete()bool` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = DeleteArgs()
        self.app_client.compose_delete(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class ZaibatsuLoanClient:
    """
        ATTENTIONS!!!! THIS IS NOT A DRILL
        * All percentages comming into the smart contract must have been multiple
          by 100. This is to account for the lack of support for floats on the AVM
        
    
    A class for interacting with the ZaibatsuLoan app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        ZaibatsuLoanClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def initiate_loan_purchase(
        self,
        *,
        loan_key: bytes | bytearray,
        folks_feed_oracle: int,
        loan_details: LoanDetails,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[LoanDetails]:
        """Calls `initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)` ABI method
        
        :param bytes | bytearray loan_key: The `loan_key` ABI parameter
        :param int folks_feed_oracle: The `folks_feed_oracle` ABI parameter
        :param LoanDetails loan_details: The `loan_details` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[LoanDetails]: The result of the transaction"""

        args = InitiateLoanPurchaseArgs(
            loan_key=loan_key,
            folks_feed_oracle=folks_feed_oracle,
            loan_details=loan_details,
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = LoanDetails(**result_dict)
        return result

    def complete_non_p2p_loan_purchase(
        self,
        *,
        loan_key: bytes | bytearray,
        completion_args: CompleteLoanArgs,
        principal_asset: int,
        borrower: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[LoanDetails]:
        """Calls `complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)` ABI method
        
        :param bytes | bytearray loan_key: The `loan_key` ABI parameter
        :param CompleteLoanArgs completion_args: The `completion_args` ABI parameter
        :param int principal_asset: The `principal_asset` ABI parameter
        :param str | bytes borrower: The `borrower` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[LoanDetails]: The result of the transaction"""

        args = CompleteNonP2PLoanPurchaseArgs(
            loan_key=loan_key,
            completion_args=completion_args,
            principal_asset=principal_asset,
            borrower=borrower,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = LoanDetails(**result_dict)
        return result

    def complete_p2p_loan_purchase(
        self,
        *,
        loan_key: bytes | bytearray,
        completion_args: CompleteLoanArgs,
        principal_asset: int,
        borrower: str | bytes,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[LoanDetails]:
        """Calls `complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)` ABI method
        
        :param bytes | bytearray loan_key: The `loan_key` ABI parameter
        :param CompleteLoanArgs completion_args: The `completion_args` ABI parameter
        :param int principal_asset: The `principal_asset` ABI parameter
        :param str | bytes borrower: The `borrower` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[LoanDetails]: The result of the transaction"""

        args = CompleteP2PLoanPurchaseArgs(
            loan_key=loan_key,
            completion_args=completion_args,
            principal_asset=principal_asset,
            borrower=borrower,
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = LoanDetails(**result_dict)
        return result

    def initiate_loan_repayment(
        self,
        *,
        loan_key: bytes | bytearray,
        repayment_key: str,
        txn: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `initiate_loan_repayment(byte[],string,axfer)void` ABI method
        
        :param bytes | bytearray loan_key: The `loan_key` ABI parameter
        :param str repayment_key: The `repayment_key` ABI parameter
        :param TransactionWithSigner txn: The `txn` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = InitiateLoanRepaymentArgs(
            loan_key=loan_key,
            repayment_key=repayment_key,
            txn=txn,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def execute_loan_repayment(
        self,
        *,
        repayment_key: str,
        recipient_account: str | bytes,
        payment_recipient: PaymentReciepient,
        principal_asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[ExecuteLoanRepaymentResponse]:
        """Calls `execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)` ABI method
        
        :param str repayment_key: The `repayment_key` ABI parameter
        :param str | bytes recipient_account: The `recipient_account` ABI parameter
        :param PaymentReciepient payment_recipient: The `payment_recipient` ABI parameter
        :param int principal_asset: The `principal_asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[ExecuteLoanRepaymentResponse]: The result of the transaction"""

        args = ExecuteLoanRepaymentArgs(
            repayment_key=repayment_key,
            recipient_account=recipient_account,
            payment_recipient=payment_recipient,
            principal_asset=principal_asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = ExecuteLoanRepaymentResponse(**result_dict)
        return result

    def clean_up_loan_repayment(
        self,
        *,
        repayment_key: str,
        borrower_account: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[CleanUpLoanRepaymentResponse]:
        """Calls `clean_up_loan_repayment(string,account)(bool)` ABI method
        
        :param str repayment_key: The `repayment_key` ABI parameter
        :param str | bytes borrower_account: The `borrower_account` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[CleanUpLoanRepaymentResponse]: The result of the transaction"""

        args = CleanUpLoanRepaymentArgs(
            repayment_key=repayment_key,
            borrower_account=borrower_account,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = CleanUpLoanRepaymentResponse(**result_dict)
        return result

    def create(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[bool]:
        """Calls `create()bool` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[bool]: The result of the transaction"""

        args = CreateArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def opt_contract_into_asset(
        self,
        *,
        asset: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[bool]:
        """Calls `opt_contract_into_asset(asset)bool` ABI method
        
        :param int asset: The `asset` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[bool]: The result of the transaction"""

        args = OptContractIntoAssetArgs(
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_create(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[bool]:
        """Calls `create()bool` ABI method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[bool]: The result of the transaction"""

        args = CreateArgs()
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def update_update(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[bool]:
        """Calls `update()bool` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[bool]: The result of the transaction"""

        args = UpdateArgs()
        result = self.app_client.update(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_delete(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[bool]:
        """Calls `delete()bool` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[bool]: The result of the transaction"""

        args = DeleteArgs()
        result = self.app_client.delete(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[CreateArgs],
        update_args: Deploy[UpdateArgs],
        delete_args: Deploy[DeleteArgs],
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[CreateArgs] create_args: Arguments used when creating an application
        :param Deploy[UpdateArgs] update_args: Arguments used when updating an application
        :param Deploy[DeleteArgs] delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
