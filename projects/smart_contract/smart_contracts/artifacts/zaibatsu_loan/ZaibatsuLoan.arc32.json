{
    "hints": {
        "initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "loan_details": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_key",
                            "string"
                        ],
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_key",
                            "string"
                        ],
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "completion_args": {
                    "name": "CompleteLoanArgs",
                    "elements": [
                        [
                            "loan_unit_name",
                            "string"
                        ],
                        [
                            "lender_nft_image_url",
                            "string"
                        ],
                        [
                            "borrower_nft_image_url",
                            "string"
                        ],
                        [
                            "loan_hash",
                            "string"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_key",
                            "string"
                        ],
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "completion_args": {
                    "name": "CompleteLoanArgs",
                    "elements": [
                        [
                            "loan_unit_name",
                            "string"
                        ],
                        [
                            "lender_nft_image_url",
                            "string"
                        ],
                        [
                            "borrower_nft_image_url",
                            "string"
                        ],
                        [
                            "loan_hash",
                            "string"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_key",
                            "string"
                        ],
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "initiate_loan_repayment(byte[],string,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "payment_recipient": {
                    "name": "PaymentReciepient",
                    "elements": [
                        [
                            "payment_percentage",
                            "uint64"
                        ],
                        [
                            "recipient_address",
                            "address"
                        ]
                    ]
                },
                "output": {
                    "name": "ExecuteLoanRepaymentResponse",
                    "elements": [
                        [
                            "loan_repayment_complete",
                            "bool"
                        ],
                        [
                            "percentage_paid",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "clean_up_loan_repayment(string,account)(bool)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "CleanUpLoanRepaymentResponse",
                    "elements": [
                        [
                            "loan_repayment_complete",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "handle_payment_default(string,string,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create()bool": {
            "call_config": {
                "no_op": "ALL"
            }
        },
        "update()bool": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete()bool": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "opt_contract_into_asset(asset)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer_asset(asset,uint64,account)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3VfbG9hbi5jb250cmFjdC5aYWliYXRzdUxvYW4uY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9sb2FuL2NvbnRyYWN0LnB5OjE3CiAgICAvLyBjbGFzcyBaYWliYXRzdUxvYW4oWmFpYmF0c3VCYXNlKToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admins": {
                    "type": "bytes",
                    "key": "admins"
                },
                "service_contract": {
                    "type": "bytes",
                    "key": "service_contract"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ZaibatsuLoan",
        "desc": "\n    ATTENTIONS!!!! THIS IS NOT A DRILL\n    * All percentages comming into the smart contract must have been multiple\n      by 100. This is to account for the lack of support for floats on the AVM\n    ",
        "methods": [
            {
                "name": "initiate_loan_purchase",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "application",
                        "name": "folks_feed_oracle"
                    },
                    {
                        "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)",
                        "name": "loan_details"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
                }
            },
            {
                "name": "complete_non_p2p_loan_purchase",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "(string,string,string,string)",
                        "name": "completion_args"
                    },
                    {
                        "type": "asset",
                        "name": "principal_asset"
                    },
                    {
                        "type": "account",
                        "name": "borrower"
                    }
                ],
                "returns": {
                    "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
                }
            },
            {
                "name": "complete_p2p_loan_purchase",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "(string,string,string,string)",
                        "name": "completion_args"
                    },
                    {
                        "type": "asset",
                        "name": "principal_asset"
                    },
                    {
                        "type": "account",
                        "name": "borrower"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
                }
            },
            {
                "name": "initiate_loan_repayment",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "string",
                        "name": "repayment_key"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "execute_loan_repayment",
                "args": [
                    {
                        "type": "string",
                        "name": "repayment_key"
                    },
                    {
                        "type": "account",
                        "name": "recipient_account"
                    },
                    {
                        "type": "(uint64,address)",
                        "name": "payment_recipient"
                    },
                    {
                        "type": "asset",
                        "name": "principal_asset"
                    }
                ],
                "returns": {
                    "type": "(bool,uint64)"
                }
            },
            {
                "name": "clean_up_loan_repayment",
                "args": [
                    {
                        "type": "string",
                        "name": "repayment_key"
                    },
                    {
                        "type": "account",
                        "name": "borrower_account"
                    }
                ],
                "returns": {
                    "type": "(bool)"
                }
            },
            {
                "name": "handle_payment_default",
                "args": [
                    {
                        "type": "string",
                        "name": "loan_key"
                    },
                    {
                        "type": "string",
                        "name": "repayment_key"
                    },
                    {
                        "type": "uint64",
                        "name": "payment_principal_asset_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "payment_collateral_asset_amount"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "opt_contract_into_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "transfer_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_amount"
                    },
                    {
                        "type": "account",
                        "name": "recipient"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}