{
    "hints": {
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create()bool": {
            "call_config": {
                "no_op": "ALL"
            }
        },
        "update()bool": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete()bool": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "iniate_p2p_loan_purchase(byte[],application,(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64),axfer)(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "loan_details": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "lend_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "lend_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "complete_p2p_loan_purchase((string,string,string,string,string),axfer)(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "completion_args": {
                    "name": "CompleteLoanArgs",
                    "elements": [
                        [
                            "loan_key",
                            "string"
                        ],
                        [
                            "loan_number",
                            "string"
                        ],
                        [
                            "lender_nft_image_url",
                            "string"
                        ],
                        [
                            "borrower_nft_image_url",
                            "string"
                        ],
                        [
                            "loan_hash",
                            "string"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "lend_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3Vfc2VydmljZS5jb250cmFjdC5aYWliYXRzdVNlcnZpY2UuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEzCiAgICAvLyBjbGFzcyBaYWliYXRzdVNlcnZpY2UoYXAuQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admins": {
                    "type": "bytes",
                    "key": "admins"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ZaibatsuService",
        "desc": "\n    ATTENTIONS!!!! THIS IS NOT A DRILL\n    * All percentages comming into the smart contract must have been multiple\n      by 100. This is to account for the lack of support for floats on the AVM\n    ",
        "methods": [
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "iniate_p2p_loan_purchase",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "application",
                        "name": "folks_feed_oracle"
                    },
                    {
                        "type": "(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)",
                        "name": "loan_details"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)"
                }
            },
            {
                "name": "complete_p2p_loan_purchase",
                "args": [
                    {
                        "type": "(string,string,string,string,string)",
                        "name": "completion_args"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}