{
    "hints": {
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create()bool": {
            "call_config": {
                "no_op": "ALL"
            }
        },
        "update()bool": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete()bool": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "opt_contract_into_asset(asset)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "authorize_pool_creation(axfer,application,uint64)(uint64,bool)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolCreationApproval",
                    "elements": [
                        [
                            "initial_amount",
                            "uint64"
                        ],
                        [
                            "success",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "iniate_p2p_loan_purchase(byte[],application,(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64),axfer)(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "loan_details": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "completion_args": {
                    "name": "CompleteLoanArgs",
                    "elements": [
                        [
                            "loan_unit_name",
                            "string"
                        ],
                        [
                            "lender_nft_image_url",
                            "string"
                        ],
                        [
                            "borrower_nft_image_url",
                            "string"
                        ],
                        [
                            "loan_hash",
                            "string"
                        ]
                    ]
                },
                "output": {
                    "name": "LoanDetails",
                    "elements": [
                        [
                            "loan_type",
                            "string"
                        ],
                        [
                            "tenure",
                            "uint8"
                        ],
                        [
                            "principal_asset_id",
                            "uint64"
                        ],
                        [
                            "collateral_asset_id",
                            "uint64"
                        ],
                        [
                            "interest_asset_amount",
                            "uint64"
                        ],
                        [
                            "principal_asset_amount",
                            "uint64"
                        ],
                        [
                            "collateral_asset_amount",
                            "uint64"
                        ],
                        [
                            "early_payment_penalty_amount",
                            "uint64"
                        ],
                        [
                            "payment_rounds",
                            "uint8"
                        ],
                        [
                            "payment_completion_timestamp",
                            "uint64"
                        ],
                        [
                            "payment_recipients",
                            "(uint64,address)[]"
                        ],
                        [
                            "image_url",
                            "string"
                        ],
                        [
                            "collateral_paid",
                            "bool"
                        ],
                        [
                            "principal_paid",
                            "bool"
                        ],
                        [
                            "completed_payment_rounds",
                            "uint8"
                        ],
                        [
                            "borrower",
                            "address"
                        ],
                        [
                            "lender_nft_asser_id",
                            "uint64"
                        ],
                        [
                            "borrower_nft_asser_id",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3Vfc2VydmljZS5jb250cmFjdC5aYWliYXRzdVNlcnZpY2UuYXBwcm92YWxfcHJvZ3JhbToKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9lbnRyeXBvaW50QDIKICAgIGNhbGxzdWIgX19pbml0X18KCm1haW5fZW50cnlwb2ludEAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6OQogICAgLy8gY2xhc3MgWmFpYmF0c3VTZXJ2aWNlKGFwLkFSQzRDb250cmFjdCk6CiAgICBtZXRob2QgImhlbGxvKHN0cmluZylzdHJpbmciCiAgICBtZXRob2QgImNyZWF0ZSgpYm9vbCIKICAgIG1ldGhvZCAidXBkYXRlKClib29sIgogICAgbWV0aG9kICJkZWxldGUoKWJvb2wiCiAgICBtZXRob2QgIm9wdF9jb250cmFjdF9pbnRvX2Fzc2V0KGFzc2V0KWJvb2wiCiAgICBtZXRob2QgImF1dGhvcml6ZV9wb29sX2NyZWF0aW9uKGF4ZmVyLGFwcGxpY2F0aW9uLHVpbnQ2NCkodWludDY0LGJvb2wpIgogICAgbWV0aG9kICJpbmlhdGVfcDJwX2xvYW5fcHVyY2hhc2UoYnl0ZVtdLGFwcGxpY2F0aW9uLChzdHJpbmcsdWludDgsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDgsdWludDY0LCh1aW50NjQsYWRkcmVzcylbXSxzdHJpbmcsYm9vbCxib29sLHVpbnQ4LGFkZHJlc3MsdWludDY0LHVpbnQ2NCksYXhmZXIpKHN0cmluZyx1aW50OCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50OCx1aW50NjQsKHVpbnQ2NCxhZGRyZXNzKVtdLHN0cmluZyxib29sLGJvb2wsdWludDgsYWRkcmVzcyx1aW50NjQsdWludDY0KSIKICAgIG1ldGhvZCAiY29tcGxldGVfcDJwX2xvYW5fcHVyY2hhc2UoYnl0ZVtdLChzdHJpbmcsc3RyaW5nLHN0cmluZyxzdHJpbmcpLGFzc2V0LGFjY291bnQsYXhmZXIpKHN0cmluZyx1aW50OCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50OCx1aW50NjQsKHVpbnQ2NCxhZGRyZXNzKVtdLHN0cmluZyxib29sLGJvb2wsdWludDgsYWRkcmVzcyx1aW50NjQsdWludDY0KSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5faGVsbG9fcm91dGVAMyBtYWluX2NyZWF0ZV9yb3V0ZUA0IG1haW5fdXBkYXRlX3JvdXRlQDUgbWFpbl9kZWxldGVfcm91dGVANiBtYWluX29wdF9jb250cmFjdF9pbnRvX2Fzc2V0X3JvdXRlQDcgbWFpbl9hdXRob3JpemVfcG9vbF9jcmVhdGlvbl9yb3V0ZUA4IG1haW5faW5pYXRlX3AycF9sb2FuX3B1cmNoYXNlX3JvdXRlQDkgbWFpbl9jb21wbGV0ZV9wMnBfbG9hbl9wdXJjaGFzZV9yb3V0ZUAxMAogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9oZWxsb19yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTkKICAgIC8vIEBhcC5hcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo5CiAgICAvLyBjbGFzcyBaYWliYXRzdVNlcnZpY2UoYXAuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE5CiAgICAvLyBAYXAuYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBoZWxsbwogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9jcmVhdGVfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjIzCiAgICAvLyBAYTQuYWJpbWV0aG9kKGNyZWF0ZT0iYWxsb3ciKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICBjYWxsc3ViIGNyZWF0ZQogICAgYnl0ZSAweDAwCiAgICBpbnQgMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToyOAogICAgLy8gQGE0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludCBVcGRhdGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgVXBkYXRlQXBwbGljYXRpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHVwZGF0ZQogICAgYnl0ZSAweDAwCiAgICBpbnQgMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fZGVsZXRlX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTozNwogICAgLy8gQGE0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiRGVsZXRlQXBwbGljYXRpb24iXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludCBEZWxldGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgRGVsZXRlQXBwbGljYXRpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGRlbGV0ZQogICAgYnl0ZSAweDAwCiAgICBpbnQgMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fb3B0X2NvbnRyYWN0X2ludG9fYXNzZXRfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjQzCiAgICAvLyBAYTQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjkKICAgIC8vIGNsYXNzIFphaWJhdHN1U2VydmljZShhcC5BUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo0MwogICAgLy8gQGE0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIG9wdF9jb250cmFjdF9pbnRvX2Fzc2V0CiAgICBieXRlIDB4MDAKICAgIGludCAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hdXRob3JpemVfcG9vbF9jcmVhdGlvbl9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NTQKICAgIC8vIEBhNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6OQogICAgLy8gY2xhc3MgWmFpYmF0c3VTZXJ2aWNlKGFwLkFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50IDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludCBheGZlcgogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIGF4ZmVyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBcHBsaWNhdGlvbnMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjU0CiAgICAvLyBAYTQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYXV0aG9yaXplX3Bvb2xfY3JlYXRpb24KICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5faW5pYXRlX3AycF9sb2FuX3B1cmNoYXNlX3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo3MQogICAgLy8gQGE0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo5CiAgICAvLyBjbGFzcyBaYWliYXRzdVNlcnZpY2UoYXAuQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBcHBsaWNhdGlvbnMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IGF4ZmVyCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgYXhmZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjcxCiAgICAvLyBAYTQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgaW5pYXRlX3AycF9sb2FuX3B1cmNoYXNlCiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2NvbXBsZXRlX3AycF9sb2FuX3B1cmNoYXNlX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTEzCiAgICAvLyBAYXAuYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6OQogICAgLy8gY2xhc3MgWmFpYmF0c3VTZXJ2aWNlKGFwLkFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgYXhmZXIKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBheGZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTEzCiAgICAvLyBAYXAuYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBjb21wbGV0ZV9wMnBfbG9hbl9wdXJjaGFzZQogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy56YWliYXRzdV9zZXJ2aWNlLmNvbnRyYWN0LlphaWJhdHN1U2VydmljZS5oZWxsbyhuYW1lOiBieXRlcykgLT4gYnl0ZXM6CmhlbGxvOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTktMjAKICAgIC8vIEBhcC5hcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgaGVsbG8oc2VsZiwgbmFtZTogYTQuU3RyaW5nKSAtPiBhcC5hcmM0LlN0cmluZzoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MjEKICAgIC8vIHJldHVybiAiSGVsbG8sICIgKyBuYW1lCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QgMiAwCiAgICBieXRlICJIZWxsbywgIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDAKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnphaWJhdHN1X3NlcnZpY2UuY29udHJhY3QuWmFpYmF0c3VTZXJ2aWNlLmNyZWF0ZSgpIC0+IHVpbnQ2NDoKY3JlYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MjMtMjQKICAgIC8vIEBhNC5hYmltZXRob2QoY3JlYXRlPSJhbGxvdyIpCiAgICAvLyBkZWYgY3JlYXRlKHNlbGYpIC0+IGJvb2w6CiAgICBwcm90byAwIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjI1CiAgICAvLyBzZWxmLmFkbWlucy5hcHBlbmQoYTQuQWRkcmVzcyhhcC5UeG4uc2VuZGVyKSkKICAgIGludCAwCiAgICBieXRlICJhZG1pbnMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIGFkbWlucyBleGlzdHMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBpbnQgMzIKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAwCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGUgImFkbWlucyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToyNgogICAgLy8gcmV0dXJuIFRydWUKICAgIGludCAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuemFpYmF0c3Vfc2VydmljZS5jb250cmFjdC5aYWliYXRzdVNlcnZpY2UudXBkYXRlKCkgLT4gdWludDY0Ogp1cGRhdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToyOC0yOQogICAgLy8gQGE0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiB1cGRhdGUoc2VsZikgLT4gYm9vbDoKICAgIHByb3RvIDAgMQogICAgYnl0ZSAiIgogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTozMAogICAgLy8gaWYgYXAuVHhuLnNlbmRlciA9PSBvcC5HbG9iYWwuY3JlYXRvcl9hZGRyZXNzOgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYnogdXBkYXRlX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MzEKICAgIC8vIHJldHVybiBUcnVlCiAgICBpbnQgMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCnVwZGF0ZV9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTozMgogICAgLy8gZm9yIGluZGV4IGluIGFwLnVyYW5nZShzZWxmLmFkbWlucy5sZW5ndGgpOgogICAgaW50IDAKICAgIGJ5dGUgImFkbWlucyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgYWRtaW5zIGV4aXN0cwogICAgaW50IDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9idXJ5IDEKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDAKCnVwZGF0ZV9mb3JfaGVhZGVyQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTozMgogICAgLy8gZm9yIGluZGV4IGluIGFwLnVyYW5nZShzZWxmLmFkbWlucy5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2RpZyAxCiAgICA8CiAgICBieiB1cGRhdGVfYWZ0ZXJfZm9yQDkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjMzCiAgICAvLyBpZiBzZWxmLmFkbWluc1tpbmRleF0gPT0gYXAuVHhuLnNlbmRlcjoKICAgIGludCAwCiAgICBieXRlICJhZG1pbnMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIGFkbWlucyBleGlzdHMKICAgIGR1cAogICAgaW50IDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIDwKICAgIGFzc2VydCAvLyBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgc3dhcAogICAgZXh0cmFjdCAyIDAKICAgIHN3YXAKICAgIGludCAzMgogICAgKgogICAgaW50IDMyCiAgICBleHRyYWN0MwogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGJ6IHVwZGF0ZV9hZnRlcl9pZl9lbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjM0CiAgICAvLyByZXR1cm4gVHJ1ZQogICAgaW50IDEKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgp1cGRhdGVfYWZ0ZXJfaWZfZWxzZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MzIKICAgIC8vIGZvciBpbmRleCBpbiBhcC51cmFuZ2Uoc2VsZi5hZG1pbnMubGVuZ3RoKToKICAgIGZyYW1lX2RpZyAwCiAgICBpbnQgMQogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICBiIHVwZGF0ZV9mb3JfaGVhZGVyQDMKCnVwZGF0ZV9hZnRlcl9mb3JAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjM1CiAgICAvLyByZXR1cm4gRmFsc2UKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy56YWliYXRzdV9zZXJ2aWNlLmNvbnRyYWN0LlphaWJhdHN1U2VydmljZS5kZWxldGUoKSAtPiB1aW50NjQ6CmRlbGV0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjM3LTM4CiAgICAvLyBAYTQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJEZWxldGVBcHBsaWNhdGlvbiJdKQogICAgLy8gZGVmIGRlbGV0ZShzZWxmKSAtPiBib29sOgogICAgcHJvdG8gMCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTozOQogICAgLy8gaWYgYXAuVHhuLnNlbmRlciA9PSBvcC5HbG9iYWwuY3JlYXRvcl9hZGRyZXNzOgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYnogZGVsZXRlX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NDAKICAgIC8vIHJldHVybiBUcnVlCiAgICBpbnQgMQogICAgcmV0c3ViCgpkZWxldGVfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NDEKICAgIC8vIHJldHVybiBGYWxzZQogICAgaW50IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy56YWliYXRzdV9zZXJ2aWNlLmNvbnRyYWN0LlphaWJhdHN1U2VydmljZS5vcHRfY29udHJhY3RfaW50b19hc3NldChhc3NldDogdWludDY0KSAtPiB1aW50NjQ6Cm9wdF9jb250cmFjdF9pbnRvX2Fzc2V0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NDMtNDQKICAgIC8vIEBhNC5hYmltZXRob2QoKQogICAgLy8gZGVmIG9wdF9jb250cmFjdF9pbnRvX2Fzc2V0KHNlbGYsIGFzc2V0OiBhcC5Bc3NldCkgLT4gYm9vbDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NDkKICAgIC8vIGFzc2V0X3JlY2VpdmVyPWFwLkdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NTEKICAgIC8vIHR4bi5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo0NgogICAgLy8gYXNzZXRfYW1vdW50PTAsCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NDUKICAgIC8vIHR4biA9IGFwLml0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludCBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NDcKICAgIC8vIGZlZT0xMDAwLAogICAgaW50IDEwMDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo1MQogICAgLy8gdHhuLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NTIKICAgIC8vIHJldHVybiBUcnVlCiAgICBpbnQgMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnphaWJhdHN1X3NlcnZpY2UuY29udHJhY3QuWmFpYmF0c3VTZXJ2aWNlLmF1dGhvcml6ZV9wb29sX2NyZWF0aW9uKHR4bjogdWludDY0LCBmb2xrc19mZWVkX29yYWNsZTogdWludDY0LCBhc3NldF9kZWNpbWFsczogdWludDY0KSAtPiBieXRlczoKYXV0aG9yaXplX3Bvb2xfY3JlYXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo1NC01NwogICAgLy8gQGE0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgYXV0aG9yaXplX3Bvb2xfY3JlYXRpb24oCiAgICAvLyAgICAgc2VsZiwgdHhuOiBndHhuLkFzc2V0VHJhbnNmZXJUcmFuc2FjdGlvbiwgZm9sa3NfZmVlZF9vcmFjbGU6IGFwLkFwcGxpY2F0aW9uLCBhc3NldF9kZWNpbWFsczogYXAuVUludDY0CiAgICAvLyApIC0+IFBvb2xDcmVhdGlvbkFwcHJvdmFsOgogICAgcHJvdG8gMyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo1OQogICAgLy8gdHhuLmFzc2V0X3JlY2VpdmVyID09IGFwLkdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgQXNzZXRSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo1OC02MAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICB0eG4uYXNzZXRfcmVjZWl2ZXIgPT0gYXAuR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgIlRoZSByZWNpcGllbnQgbXVzdCBiZSB0aGUgYXBwbGljYXRpb24gYWRkcmVzcyIKICAgIGFzc2VydCAvLyBUaGUgcmVjaXBpZW50IG11c3QgYmUgdGhlIGFwcGxpY2F0aW9uIGFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjYxCiAgICAvLyBhbW91bnRfcGx1c190cmFuc2FjdGlvbl9mZWUgPSBzZWxmLmNhbGN1bGF0ZV9hbXRfcGx1c19mZWUodHhuLmFzc2V0X2Ftb3VudCkKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgQXNzZXRBbW91bnQKICAgIGR1cAogICAgY2FsbHN1YiBjYWxjdWxhdGVfYW10X3BsdXNfZmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo2MgogICAgLy8gZmVlX2Ftb3VudCA9IGFtb3VudF9wbHVzX3RyYW5zYWN0aW9uX2ZlZSAtIHR4bi5hc3NldF9hbW91bnQKICAgIGRpZyAxCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo2MwogICAgLy8gcG9vbF9mdW5kX2Ftb3VudCA9IHR4bi5hc3NldF9hbW91bnQgLSBmZWVfYW1vdW50CiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo2NQogICAgLy8gYXNzZXRfZG9sbGFyX3ByaWNlID0gc2VsZi5nZXRfYXNzZXRfcHJpY2UoZm9sa3NfZmVlZF9vcmFjbGUsIHR4bi54ZmVyX2Fzc2V0KQogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBYZmVyQXNzZXQKICAgIGZyYW1lX2RpZyAtMgogICAgc3dhcAogICAgY2FsbHN1YiBnZXRfYXNzZXRfcHJpY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjY2CiAgICAvLyBwb29sX2Z1bmRfZG9sbGFyX2Ftb3VudCA9IChhc3NldF9kb2xsYXJfcHJpY2UgKiBwb29sX2Z1bmRfYW1vdW50KSAvLyBhc3NldF9kZWNpbWFscwogICAgZGlnIDEKICAgICoKICAgIGZyYW1lX2RpZyAtMQogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NjcKICAgIC8vIGFzc2VydCBwb29sX2Z1bmRfZG9sbGFyX2Ftb3VudCA+IGFwLlVJbnQ2NCgyMCksICJUaGUgYXNzZXRfYW1vdW50IG11c3QgYmUgd29ydGggZ3JlYXRlciB0aGF0IDIwIGRvbGxhcnMiCiAgICBpbnQgMjAKICAgID4KICAgIGFzc2VydCAvLyBUaGUgYXNzZXRfYW1vdW50IG11c3QgYmUgd29ydGggZ3JlYXRlciB0aGF0IDIwIGRvbGxhcnMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjY4CiAgICAvLyBhcHByb3ZhbCA9IFBvb2xDcmVhdGlvbkFwcHJvdmFsKGluaXRpYWxfYW1vdW50PUE0VUludDY0KHBvb2xfZnVuZF9hbW91bnQpLCBzdWNjZXNzPWE0LkJvb2woVHJ1ZSkpCiAgICBpdG9iCiAgICBieXRlIDB4ODAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6NjkKICAgIC8vIHJldHVybiBhcHByb3ZhbAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnphaWJhdHN1X3NlcnZpY2UuY29udHJhY3QuWmFpYmF0c3VTZXJ2aWNlLmNhbGN1bGF0ZV9hbXRfcGx1c19mZWUoYW10OiB1aW50NjQpIC0+IHVpbnQ2NDoKY2FsY3VsYXRlX2FtdF9wbHVzX2ZlZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE5My0xOTQKICAgIC8vIEBhcC5zdWJyb3V0aW5lCiAgICAvLyBkZWYgY2FsY3VsYXRlX2FtdF9wbHVzX2ZlZShzZWxmLCBhbXQ6IGFwLlVJbnQ2NCkgLT4gYXAuVUludDY0OgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxOTYKICAgIC8vIGFtdF9hZGp1c3RlZF9mb3JfZGVjaW1hbCA9IGFtdCAqIGFwLlVJbnQ2NCgxMCkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDEwCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxOTcKICAgIC8vIGFwcHJveF9mZWVfcGx1c19hbXQgPSBzZWxmLnBlcmNlbnRhZ2VfaW5jcmVhc2UoQTRVSW50NjQoYW10X2FkanVzdGVkX2Zvcl9kZWNpbWFsKSwgQTRVSW50NjQoZmVlX3BlcmNlbnRhZ2UpKQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTk1CiAgICAvLyBmZWVfcGVyY2VudGFnZSA9IGFwLlVJbnQ2NCg1KQogICAgaW50IDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE5NwogICAgLy8gYXBwcm94X2ZlZV9wbHVzX2FtdCA9IHNlbGYucGVyY2VudGFnZV9pbmNyZWFzZShBNFVJbnQ2NChhbXRfYWRqdXN0ZWRfZm9yX2RlY2ltYWwpLCBBNFVJbnQ2NChmZWVfcGVyY2VudGFnZSkpCiAgICBpdG9iCiAgICBjYWxsc3ViIHBlcmNlbnRhZ2VfaW5jcmVhc2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE5OAogICAgLy8gY29ycmVjdGVkX2FwcHJveF9mZWVfcGx1c19hbXQgPSBhcHByb3hfZmVlX3BsdXNfYW10Lm5hdGl2ZSAvLyBhcC5VSW50NjQoMTApCiAgICBidG9pCiAgICBpbnQgMTAKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE5OQogICAgLy8gcmV0dXJuIGNvcnJlY3RlZF9hcHByb3hfZmVlX3BsdXNfYW10CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuemFpYmF0c3Vfc2VydmljZS5jb250cmFjdC5aYWliYXRzdVNlcnZpY2UucGVyY2VudGFnZV9pbmNyZWFzZShhbW91bnQ6IGJ5dGVzLCBpbmNyZWFzZTogYnl0ZXMpIC0+IGJ5dGVzOgpwZXJjZW50YWdlX2luY3JlYXNlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MjEyLTIxMwogICAgLy8gQGFwLnN1YnJvdXRpbmUKICAgIC8vIGRlZiBwZXJjZW50YWdlX2luY3JlYXNlKHNlbGYsIGFtb3VudDogQTRVSW50NjQsIGluY3JlYXNlOiBBNFVJbnQ2NCkgLT4gQTRVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjIxNAogICAgLy8gcGVyY2VudGFnZSA9IHNlbGYucGVyY2VudGFnZShhbW91bnQsIGluY3JlYXNlKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgcGVyY2VudGFnZQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MjE1CiAgICAvLyByZXN1bHRzID0gcGVyY2VudGFnZS5uYXRpdmUgKyBhbW91bnQubmF0aXZlCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjIxNgogICAgLy8gcmV0dXJuIEE0VUludDY0KHJlc3VsdHMpCiAgICBpdG9iCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuemFpYmF0c3Vfc2VydmljZS5jb250cmFjdC5aYWliYXRzdVNlcnZpY2UucGVyY2VudGFnZShhbW91bnQ6IGJ5dGVzLCBwZXJjZW50OiBieXRlcykgLT4gYnl0ZXM6CnBlcmNlbnRhZ2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToyMDctMjA4CiAgICAvLyBAYXAuc3Vicm91dGluZQogICAgLy8gZGVmIHBlcmNlbnRhZ2Uoc2VsZiwgYW1vdW50OiBBNFVJbnQ2NCwgcGVyY2VudDogQTRVSW50NjQpIC0+IEE0VUludDY0OgogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToyMDkKICAgIC8vIHJlc3VsdCA9IChwZXJjZW50Lm5hdGl2ZSAqIGFtb3VudC5uYXRpdmUpIC8vIGFwLlVJbnQ2NCgxMDApCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgKgogICAgaW50IDEwMAogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MjEwCiAgICAvLyByZXR1cm4gQTRVSW50NjQocmVzdWx0KQogICAgaXRvYgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnphaWJhdHN1X3NlcnZpY2UuY29udHJhY3QuWmFpYmF0c3VTZXJ2aWNlLmdldF9hc3NldF9wcmljZShmb2xrc19mZWVkX29yYWNsZTogdWludDY0LCBhc2E6IHVpbnQ2NCkgLT4gdWludDY0OgpnZXRfYXNzZXRfcHJpY2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToyMDEtMjAyCiAgICAvLyBAYXAuc3Vicm91dGluZQogICAgLy8gZGVmIGdldF9hc3NldF9wcmljZShzZWxmLCBmb2xrc19mZWVkX29yYWNsZTogYXAuQXBwbGljYXRpb24sIGFzYTogYXAuQXNzZXQpIC0+IGFwLlVJbnQ2NDoKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MjAzCiAgICAvLyBbdmFsdWUsIGV4aXN0c10gPSBvcC5BcHBHbG9iYWwuZ2V0X2V4X2J5dGVzKGZvbGtzX2ZlZWRfb3JhY2xlLCBvcC5pdG9iKGFzYS5pZCkpCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtMgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjIwNAogICAgLy8gYXNzZXJ0IGV4aXN0cywgIlRoaXMgYXNldCBpcyBub3Qgc3VwcG9ydGVkIgogICAgYXNzZXJ0IC8vIFRoaXMgYXNldCBpcyBub3Qgc3VwcG9ydGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToyMDUKICAgIC8vIHJldHVybiBvcC5leHRyYWN0X3VpbnQ2NCh2YWx1ZSwgYXAuVUludDY0KDApKQogICAgaW50IDAKICAgIGV4dHJhY3RfdWludDY0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuemFpYmF0c3Vfc2VydmljZS5jb250cmFjdC5aYWliYXRzdVNlcnZpY2UuaW5pYXRlX3AycF9sb2FuX3B1cmNoYXNlKGxvYW5fa2V5OiBieXRlcywgZm9sa3NfZmVlZF9vcmFjbGU6IHVpbnQ2NCwgbG9hbl9kZXRhaWxzOiBieXRlcywgdHhuOiB1aW50NjQpIC0+IGJ5dGVzOgppbmlhdGVfcDJwX2xvYW5fcHVyY2hhc2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo3MS03OAogICAgLy8gQGE0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgaW5pYXRlX3AycF9sb2FuX3B1cmNoYXNlKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgbG9hbl9rZXk6IGFwLkJ5dGVzLAogICAgLy8gICAgIGZvbGtzX2ZlZWRfb3JhY2xlOiBhcC5BcHBsaWNhdGlvbiwKICAgIC8vICAgICBsb2FuX2RldGFpbHM6IExvYW5EZXRhaWxzLAogICAgLy8gICAgIHR4bjogZ3R4bi5Bc3NldFRyYW5zZmVyVHJhbnNhY3Rpb24sCiAgICAvLyApIC0+IExvYW5EZXRhaWxzOgogICAgcHJvdG8gNCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo4MAogICAgLy8gdHhuLmFzc2V0X3JlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQXNzZXRSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo3OS04MQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICB0eG4uYXNzZXRfcmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgIlRoZSByZWNpcGllbnQgbXVzdCBiZSB0aGUgWmFpYmF0c3VTZXJ2aWNlIGFkZHJlc3MiCiAgICBhc3NlcnQgLy8gVGhlIHJlY2lwaWVudCBtdXN0IGJlIHRoZSBaYWliYXRzdVNlcnZpY2UgYWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6ODMKICAgIC8vIHZhbCA9IG9wLkJveC5nZXQobG9hbl9rZXkpCiAgICBmcmFtZV9kaWcgLTQKICAgIGJveF9nZXQKICAgIGJ1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6ODQKICAgIC8vIGFzc2VydCBub3QgdmFsWzFdLCAiQSBMb2FuIHB1cmNoYXNlIHdpdGggdGhpcyBrZXkgaGFzIGFscmVhZHkgYmVlbiBpbml0aWF0ZWQiCiAgICAhCiAgICBhc3NlcnQgLy8gQSBMb2FuIHB1cmNoYXNlIHdpdGggdGhpcyBrZXkgaGFzIGFscmVhZHkgYmVlbiBpbml0aWF0ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5Ojg2CiAgICAvLyBjb2xsYXRlcmFsX3ByaWNlID0gc2VsZi5nZXRfYXNzZXRfcHJpY2UoZm9sa3NfZmVlZF9vcmFjbGUsIHR4bi54ZmVyX2Fzc2V0KQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBYZmVyQXNzZXQKICAgIGZyYW1lX2RpZyAtMwogICAgZGlnIDEKICAgIGNhbGxzdWIgZ2V0X2Fzc2V0X3ByaWNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo4NwogICAgLy8gYXNzZXJ0IGNvbGxhdGVyYWxfcHJpY2UgPiAwLCAiVGhlIGFzYSBpcyBvZiBubyB2YWx1ZSBvciBpcyBub3Qgc3VwcG9ydGVkIgogICAgYXNzZXJ0IC8vIFRoZSBhc2EgaXMgb2Ygbm8gdmFsdWUgb3IgaXMgbm90IHN1cHBvcnRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6ODkKICAgIC8vIGFzc2VydCBsb2FuX2RldGFpbHMubG9hbl90eXBlID09IGE0LlN0cmluZygiUDJQIiksICJUaGUgbG9hbiBtdXN0IGJlIGEgUDJQIGxvYW4iCiAgICBmcmFtZV9kaWcgLTIKICAgIGludCAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIC0yCiAgICBkaWcgMQogICAgZXh0cmFjdF91aW50MTYKICAgIGludCAyCiAgICArCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvdmVyIDIKICAgIGV4dHJhY3QzCiAgICBieXRlICJceDAwXHgwM1AyUCIKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIGxvYW4gbXVzdCBiZSBhIFAyUCBsb2FuCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo5MAogICAgLy8gYXNzZXJ0IG5vdCBsb2FuX2RldGFpbHMuY29sbGF0ZXJhbF9wYWlkLCAiVGhlIGxvYW4gY29sbGF0ZXJhbCBtdXN0IG5vdCBiZSBwYWlkIgogICAgZnJhbWVfZGlnIC0yCiAgICBpbnQgNTEyCiAgICBnZXRiaXQKICAgIGJ5dGUgMHgwMAogICAgaW50IDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlIDB4MDAKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIGxvYW4gY29sbGF0ZXJhbCBtdXN0IG5vdCBiZSBwYWlkCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo5MQogICAgLy8gYXNzZXJ0IG5vdCBsb2FuX2RldGFpbHMucHJpbmNpcGFsX3BhaWQsICJUaGUgbG9hbiBwcmluY2lwYWwgbXVzdCBub3QgYmUgcGFpZCIKICAgIGZyYW1lX2RpZyAtMgogICAgaW50IDUxMwogICAgZ2V0Yml0CiAgICBieXRlIDB4MDAKICAgIGludCAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZSAweDAwCiAgICA9PQogICAgYXNzZXJ0IC8vIFRoZSBsb2FuIHByaW5jaXBhbCBtdXN0IG5vdCBiZSBwYWlkCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo5MgogICAgLy8gYXNzZXJ0IGxvYW5fZGV0YWlscy5wYXltZW50X3JlY2lwaWVudHMubGVuZ3RoID09IGFwLlVJbnQ2NCgxKSwgIk9ubHkgb25lIHJlY2lwaWVudCBpcyBhbGxvd2VkIGluIGEgUDJQIGxvYW4iCiAgICBmcmFtZV9kaWcgLTIKICAgIGludCA2MAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2RpZyAtMgogICAgZGlnIDEKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnQgMgogICAgKwogICAgZnJhbWVfZGlnIC0yCiAgICBjb3ZlciAyCiAgICBleHRyYWN0MwogICAgaW50IDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpbnQgMQogICAgPT0KICAgIGFzc2VydCAvLyBPbmx5IG9uZSByZWNpcGllbnQgaXMgYWxsb3dlZCBpbiBhIFAyUCBsb2FuCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo5MwogICAgLy8gYXNzZXJ0IGxvYW5fZGV0YWlscy5ib3Jyb3dlciA9PSB0eG4uc2VuZGVyLCAiVGhlIHNlbmRlciBtdXN0IGFsc28gYmUgdGhlIGJvcnJvd2VyIgogICAgZnJhbWVfZGlnIC0yCiAgICBleHRyYWN0IDY2IDMyCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBUaGUgc2VuZGVyIG11c3QgYWxzbyBiZSB0aGUgYm9ycm93ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5Ojk2CiAgICAvLyBsb2FuX2RldGFpbHMuY29sbGF0ZXJhbF9hc3NldF9pZCA9PSB0eG4ueGZlcl9hc3NldC5pZAogICAgZnJhbWVfZGlnIC0yCiAgICBleHRyYWN0IDExIDgKICAgIHN3YXAKICAgIGl0b2IKICAgIGI9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6OTUtOTcKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgbG9hbl9kZXRhaWxzLmNvbGxhdGVyYWxfYXNzZXRfaWQgPT0gdHhuLnhmZXJfYXNzZXQuaWQKICAgIC8vICksICJUaGUgYXNzZXQgYmVpbmcgdHJhbnNmZXJlZCBtdXN0IGJlIHRoZSBjb2xsYXRlcmFsIGFzc2V0IgogICAgYXNzZXJ0IC8vIFRoZSBhc3NldCBiZWluZyB0cmFuc2ZlcmVkIG11c3QgYmUgdGhlIGNvbGxhdGVyYWwgYXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5Ojk5CiAgICAvLyBhc3NlcnQgdHhuLmFzc2V0X2Ftb3VudCA+PSBzZWxmLmNhbGN1bGF0ZV9hbXRfcGx1c19mZWUoCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFzc2V0QW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxMDAKICAgIC8vIGxvYW5fZGV0YWlscy5jb2xsYXRlcmFsX2Fzc2V0X2Ftb3VudC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgZXh0cmFjdCAzNSA4CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weTo5OS0xMDEKICAgIC8vIGFzc2VydCB0eG4uYXNzZXRfYW1vdW50ID49IHNlbGYuY2FsY3VsYXRlX2FtdF9wbHVzX2ZlZSgKICAgIC8vICAgICBsb2FuX2RldGFpbHMuY29sbGF0ZXJhbF9hc3NldF9hbW91bnQubmF0aXZlCiAgICAvLyApLCAiSW5zdWZmaWNpZW50IHR4biBhc3NldF9hbW91bnQhIEFtb3VudCBtdXN0IGJlIGVxdWFsIHRvIGNvbGxhdGVyYWxfYXNzZXRfYW1vdW50IHBsdXMgZmVlcyIKICAgIGNhbGxzdWIgY2FsY3VsYXRlX2FtdF9wbHVzX2ZlZQogICAgPj0KICAgIGFzc2VydCAvLyBJbnN1ZmZpY2llbnQgdHhuIGFzc2V0X2Ftb3VudCEgQW1vdW50IG11c3QgYmUgZXF1YWwgdG8gY29sbGF0ZXJhbF9hc3NldF9hbW91bnQgcGx1cyBmZWVzCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxMDQKICAgIC8vIGxvYW5fZGV0YWlscy5wYXltZW50X2NvbXBsZXRpb25fdGltZXN0YW1wLm5hdGl2ZSA+IG9wLkdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgNTIgOAogICAgYnRvaQogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgPgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTAzLTEwNQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBsb2FuX2RldGFpbHMucGF5bWVudF9jb21wbGV0aW9uX3RpbWVzdGFtcC5uYXRpdmUgPiBvcC5HbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gKSwgIlRoZSBwYXltZW50IGNvbXBsZXRpb24gdGltZXN0YW1wIG11c3QgYmUgZ3JlYXRlciB0aGFuIG5vdyIKICAgIGFzc2VydCAvLyBUaGUgcGF5bWVudCBjb21wbGV0aW9uIHRpbWVzdGFtcCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBub3cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEwNwogICAgLy8gbG9hbl9kZXRhaWxzLmNvbGxhdGVyYWxfcGFpZCA9IGE0LkJvb2woVHJ1ZSkgICMgbm9xYTogRkJUMDAzCiAgICBmcmFtZV9kaWcgLTIKICAgIGludCA1MTIKICAgIGludCAxCiAgICBzZXRiaXQKICAgIGZyYW1lX2J1cnkgLTIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEwOQogICAgLy8gb3AuQm94LnB1dChsb2FuX2tleSwgbG9hbl9kZXRhaWxzLmJ5dGVzKQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgLTIKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjExMQogICAgLy8gcmV0dXJuIGxvYW5fZGV0YWlscwogICAgZnJhbWVfZGlnIC0yCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuemFpYmF0c3Vfc2VydmljZS5jb250cmFjdC5aYWliYXRzdVNlcnZpY2UuY29tcGxldGVfcDJwX2xvYW5fcHVyY2hhc2UobG9hbl9rZXk6IGJ5dGVzLCBjb21wbGV0aW9uX2FyZ3M6IGJ5dGVzLCBwcmluY2lwYWxfYXNzZXQ6IHVpbnQ2NCwgYm9ycm93ZXI6IGJ5dGVzLCB0eG46IHVpbnQ2NCkgLT4gYnl0ZXM6CmNvbXBsZXRlX3AycF9sb2FuX3B1cmNoYXNlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTEzLTEyMQogICAgLy8gQGFwLmFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBjb21wbGV0ZV9wMnBfbG9hbl9wdXJjaGFzZSgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGxvYW5fa2V5OiBhcC5CeXRlcywKICAgIC8vICAgICBjb21wbGV0aW9uX2FyZ3M6IENvbXBsZXRlTG9hbkFyZ3MsCiAgICAvLyAgICAgcHJpbmNpcGFsX2Fzc2V0OiBhcC5Bc3NldCwKICAgIC8vICAgICBib3Jyb3dlcjogYXAuQWNjb3VudCwKICAgIC8vICAgICB0eG46IGd0eG4uQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uLAogICAgLy8gKSAtPiBMb2FuRGV0YWlsczoKICAgIHByb3RvIDUgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTIzCiAgICAvLyB0eG4uYXNzZXRfcmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBc3NldFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEyMi0xMjQKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgdHhuLmFzc2V0X3JlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJUaGUgcmVjaXBpZW50IG11c3QgYmUgdGhlIFphaWJhdHN1U2VydmljZSBhZGRyZXNzIgogICAgYXNzZXJ0IC8vIFRoZSByZWNpcGllbnQgbXVzdCBiZSB0aGUgWmFpYmF0c3VTZXJ2aWNlIGFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEyNgogICAgLy8gW2xvYW5fYnl0ZXMsIGV4aXN0c10gPSBvcC5Cb3guZ2V0KGxvYW5fa2V5KQogICAgZnJhbWVfZGlnIC01CiAgICBib3hfZ2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxMjcKICAgIC8vIGFzc2VydCBleGlzdHMsICJBIHJlY2NvcmQgd2l0aCB0aGUgbG9hbl9rZXkgcGFzc2VkIHdhcyBub3QgZm91bmQiCiAgICBhc3NlcnQgLy8gQSByZWNjb3JkIHdpdGggdGhlIGxvYW5fa2V5IHBhc3NlZCB3YXMgbm90IGZvdW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxMjkKICAgIC8vIGFzc2VydCBkZXRhaWxzLmNvbGxhdGVyYWxfcGFpZCwgIlRoZSBsb2FuIGNvbGxhdGVyYWwgbXVzdCBoYXZlIGJlZW4gcGFpZCBieSB0aGlzIHBvaW50IgogICAgZHVwCiAgICBpbnQgNTEyCiAgICBnZXRiaXQKICAgIGJ5dGUgMHgwMAogICAgaW50IDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlIDB4MDAKICAgICE9CiAgICBhc3NlcnQgLy8gVGhlIGxvYW4gY29sbGF0ZXJhbCBtdXN0IGhhdmUgYmVlbiBwYWlkIGJ5IHRoaXMgcG9pbnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEzMAogICAgLy8gYXNzZXJ0IG5vdCBkZXRhaWxzLnByaW5jaXBhbF9wYWlkLCAiVGhlIHByaW5jaXBhbCBtdXN0IG5vdCBoYXZlIGJlZW4gcGFpZCIKICAgIGR1cAogICAgaW50IDUxMwogICAgZ2V0Yml0CiAgICBieXRlIDB4MDAKICAgIGludCAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZSAweDAwCiAgICA9PQogICAgYXNzZXJ0IC8vIFRoZSBwcmluY2lwYWwgbXVzdCBub3QgaGF2ZSBiZWVuIHBhaWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEzMgogICAgLy8gdHhuLnhmZXJfYXNzZXQuaWQgPT0gZGV0YWlscy5wcmluY2lwYWxfYXNzZXRfaWQubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFhmZXJBc3NldAogICAgZGlnIDEKICAgIGV4dHJhY3QgMyA4CiAgICBidG9pCiAgICBkdXAKICAgIGNvdmVyIDMKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxMzEtMTMzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHR4bi54ZmVyX2Fzc2V0LmlkID09IGRldGFpbHMucHJpbmNpcGFsX2Fzc2V0X2lkLm5hdGl2ZQogICAgLy8gKSwgIlRoZSBhc3NldCB0cmFuc2ZlcmVkIG11c3QgYmUgdGhlIHNhbWUgYXMgdGhlIHByaW5jaXBhbCIKICAgIGFzc2VydCAvLyBUaGUgYXNzZXQgdHJhbnNmZXJlZCBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSBwcmluY2lwYWwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEzNAogICAgLy8gYXNzZXJ0IGJvcnJvd2VyID09IGRldGFpbHMuYm9ycm93ZXIubmF0aXZlLCAiVGhlIGJvcnJvd2VyIG11c3QgYmUgdGhlIGJvcnJvd2VyIGluIHRoZSBsb2FuIGRldGFpbHMiCiAgICBkdXAKICAgIGV4dHJhY3QgNjYgMzIKICAgIGZyYW1lX2RpZyAtMgogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQgLy8gVGhlIGJvcnJvd2VyIG11c3QgYmUgdGhlIGJvcnJvd2VyIGluIHRoZSBsb2FuIGRldGFpbHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEzNgogICAgLy8gcHJpbmNpcGFsX2Fzc2V0LmlkID09IGRldGFpbHMucHJpbmNpcGFsX2Fzc2V0X2lkLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0zCiAgICBkaWcgMwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjEzNS0xMzcKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgcHJpbmNpcGFsX2Fzc2V0LmlkID09IGRldGFpbHMucHJpbmNpcGFsX2Fzc2V0X2lkLm5hdGl2ZQogICAgLy8gKSwgIlRoZSBhc3NldCBwYXNzZWQgbXVzdCBiZSB0aGUgc2FtZSBhcyB0aGUgcHJpbmNpcGFsIgogICAgYXNzZXJ0IC8vIFRoZSBhc3NldCBwYXNzZWQgbXVzdCBiZSB0aGUgc2FtZSBhcyB0aGUgcHJpbmNpcGFsCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxMzkKICAgIC8vIHNlbGYuZW5zdXJlX3RyYW5zYWN0aW9uX2ZlZV9vbl9hbW91bnQodHhuLCBkZXRhaWxzLnByaW5jaXBhbF9hc3NldF9hbW91bnQubmF0aXZlKQogICAgZGlnIDEKICAgIGV4dHJhY3QgMjcgOAogICAgYnRvaQogICAgZnJhbWVfZGlnIC0xCiAgICBkaWcgMQogICAgY2FsbHN1YiBlbnN1cmVfdHJhbnNhY3Rpb25fZmVlX29uX2Ftb3VudAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxNDYKICAgIC8vIGNvbXBsZXRpb25fdHhuLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIHN3YXAKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxNDAKICAgIC8vIGNvbXBsZXRpb25fdHhuID0gYXAuaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50IGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxNDEKICAgIC8vIGZlZT0xMDAwLAogICAgaW50IDEwMDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxNDYKICAgIC8vIGNvbXBsZXRpb25fdHhuLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTQ4CiAgICAvLyBkZXRhaWxzLnByaW5jaXBhbF9wYWlkID0gYTQuQm9vbChUcnVlKSAgIyBub3FhOiBGQlQwMDMKICAgIGludCA1MTMKICAgIGludCAxCiAgICBzZXRiaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE0OQogICAgLy8gZGV0YWlscy5jb21wbGV0ZWRfcGF5bWVudF9yb3VuZHMgPSBhNC5VSW50OCgwKQogICAgYnl0ZSAweDAwCiAgICByZXBsYWNlMiA2NQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTUxCiAgICAvLyBjb21wbGV0aW9uX2FyZ3MuYm9ycm93ZXJfbmZ0X2ltYWdlX3VybCwKICAgIGZyYW1lX2RpZyAtNAogICAgaW50IDQKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9kaWcgLTQKICAgIGRpZyAxCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50IDIKICAgICsKICAgIGZyYW1lX2RpZyAtNAogICAgY292ZXIgMgogICAgZXh0cmFjdDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE1MgogICAgLy8gb3AuY29uY2F0KGFwLkJ5dGVzKGIiQi0iKSwgY29tcGxldGlvbl9hcmdzLmxvYW5fdW5pdF9uYW1lLmJ5dGVzKSwKICAgIGZyYW1lX2RpZyAtNAogICAgaW50IDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9kaWcgLTQKICAgIGRpZyAxCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50IDIKICAgICsKICAgIGZyYW1lX2RpZyAtNAogICAgY292ZXIgMgogICAgZXh0cmFjdDMKICAgIGJ5dGUgIkItIgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTUzCiAgICAvLyBvcC5jb25jYXQoYXAuQnl0ZXMoYiIjQi0iKSwgY29tcGxldGlvbl9hcmdzLmxvYW5fdW5pdF9uYW1lLmJ5dGVzKSwKICAgIGJ5dGUgIiNCLSIKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE1NAogICAgLy8gY29tcGxldGlvbl9hcmdzLmxvYW5faGFzaCwKICAgIGZyYW1lX2RpZyAtNAogICAgaW50IDYKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9kaWcgLTQKICAgIGRpZyAxCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50IDIKICAgICsKICAgIGZyYW1lX2RpZyAtNAogICAgY292ZXIgMgogICAgZXh0cmFjdDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE1MC0xNTUKICAgIC8vIGJvcnJvd2VyX25mdCA9IHNlbGYuY3JlYXRlX2xvYW5fbmZ0KAogICAgLy8gICAgIGNvbXBsZXRpb25fYXJncy5ib3Jyb3dlcl9uZnRfaW1hZ2VfdXJsLAogICAgLy8gICAgIG9wLmNvbmNhdChhcC5CeXRlcyhiIkItIiksIGNvbXBsZXRpb25fYXJncy5sb2FuX3VuaXRfbmFtZS5ieXRlcyksCiAgICAvLyAgICAgb3AuY29uY2F0KGFwLkJ5dGVzKGIiI0ItIiksIGNvbXBsZXRpb25fYXJncy5sb2FuX3VuaXRfbmFtZS5ieXRlcyksCiAgICAvLyAgICAgY29tcGxldGlvbl9hcmdzLmxvYW5faGFzaCwKICAgIC8vICkKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDMKICAgIGRpZyAzCiAgICBjYWxsc3ViIGNyZWF0ZV9sb2FuX25mdAogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTU3CiAgICAvLyBjb21wbGV0aW9uX2FyZ3MubGVuZGVyX25mdF9pbWFnZV91cmwsCiAgICBmcmFtZV9kaWcgLTQKICAgIGludCAyCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIC00CiAgICBkaWcgMQogICAgZXh0cmFjdF91aW50MTYKICAgIGludCAyCiAgICArCiAgICBmcmFtZV9kaWcgLTQKICAgIGNvdmVyIDIKICAgIGV4dHJhY3QzCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxNTgKICAgIC8vIG9wLmNvbmNhdChhcC5CeXRlcyhiIkwtIiksIGNvbXBsZXRpb25fYXJncy5sb2FuX3VuaXRfbmFtZS5ieXRlcyksCiAgICBieXRlICJMLSIKICAgIGRpZyA0CiAgICBjb25jYXQKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE1OQogICAgLy8gb3AuY29uY2F0KGFwLkJ5dGVzKGIiI0wtIiksIGNvbXBsZXRpb25fYXJncy5sb2FuX3VuaXRfbmFtZS5ieXRlcyksCiAgICBieXRlICIjTC0iCiAgICB1bmNvdmVyIDUKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTU2LTE2MQogICAgLy8gbGVuZGVyX25mdCA9IHNlbGYuY3JlYXRlX2xvYW5fbmZ0KAogICAgLy8gICAgIGNvbXBsZXRpb25fYXJncy5sZW5kZXJfbmZ0X2ltYWdlX3VybCwKICAgIC8vICAgICBvcC5jb25jYXQoYXAuQnl0ZXMoYiJMLSIpLCBjb21wbGV0aW9uX2FyZ3MubG9hbl91bml0X25hbWUuYnl0ZXMpLAogICAgLy8gICAgIG9wLmNvbmNhdChhcC5CeXRlcyhiIiNMLSIpLCBjb21wbGV0aW9uX2FyZ3MubG9hbl91bml0X25hbWUuYnl0ZXMpLAogICAgLy8gICAgIGNvbXBsZXRpb25fYXJncy5sb2FuX2hhc2gsCiAgICAvLyApCiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIHVuY292ZXIgMgogICAgdW5jb3ZlciAzCiAgICBjYWxsc3ViIGNyZWF0ZV9sb2FuX25mdAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTYyCiAgICAvLyBkZXRhaWxzLmJvcnJvd2VyX25mdF9hc3Nlcl9pZCA9IEE0VUludDY0KGJvcnJvd2VyX25mdC5pZCkKICAgIHN3YXAKICAgIGl0b2IKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgcmVwbGFjZTIgMTA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxNjMKICAgIC8vIGRldGFpbHMubGVuZGVyX25mdF9hc3Nlcl9pZCA9IEE0VUludDY0KGxlbmRlcl9uZnQuaWQpCiAgICBzd2FwCiAgICBpdG9iCiAgICByZXBsYWNlMiA5OAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTY0CiAgICAvLyBvcC5Cb3gucHV0KGxvYW5fa2V5LCBkZXRhaWxzLmJ5dGVzKQogICAgZnJhbWVfZGlnIC01CiAgICBkaWcgMQogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTY1CiAgICAvLyByZXR1cm4gZGV0YWlscwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnphaWJhdHN1X3NlcnZpY2UuY29udHJhY3QuWmFpYmF0c3VTZXJ2aWNlLmVuc3VyZV90cmFuc2FjdGlvbl9mZWVfb25fYW1vdW50KHR4bjogdWludDY0LCBhbW91bnQ6IHVpbnQ2NCkgLT4gdWludDY0OgplbnN1cmVfdHJhbnNhY3Rpb25fZmVlX29uX2Ftb3VudDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE4Ni0xODcKICAgIC8vIEBhcC5zdWJyb3V0aW5lCiAgICAvLyBkZWYgZW5zdXJlX3RyYW5zYWN0aW9uX2ZlZV9vbl9hbW91bnQoc2VsZiwgdHhuOiBndHhuLkFzc2V0VHJhbnNmZXJUcmFuc2FjdGlvbiwgYW1vdW50OiBhcC5VSW50NjQpIC0+IGJvb2w6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE4OAogICAgLy8gYXNzZXJ0IHR4bi5hc3NldF9hbW91bnQgPj0gc2VsZi5jYWxjdWxhdGVfYW10X3BsdXNfZmVlKAogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBc3NldEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTg4LTE5MAogICAgLy8gYXNzZXJ0IHR4bi5hc3NldF9hbW91bnQgPj0gc2VsZi5jYWxjdWxhdGVfYW10X3BsdXNfZmVlKAogICAgLy8gICAgIGFtb3VudAogICAgLy8gKSwgIkluc3VmZmljaWVudCB0eG4gYXNzZXRfYW1vdW50ISBBbW91bnQgbXVzdCBiZSBlcXVhbCB0byBwcmluY2lwYWxfYXNzZXRfYW1vdW50IHBsdXMgZmVlcyIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBjYWxjdWxhdGVfYW10X3BsdXNfZmVlCiAgICA+PQogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCB0eG4gYXNzZXRfYW1vdW50ISBBbW91bnQgbXVzdCBiZSBlcXVhbCB0byBwcmluY2lwYWxfYXNzZXRfYW1vdW50IHBsdXMgZmVlcwogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTkxCiAgICAvLyByZXR1cm4gVHJ1ZQogICAgaW50IDEKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy56YWliYXRzdV9zZXJ2aWNlLmNvbnRyYWN0LlphaWJhdHN1U2VydmljZS5jcmVhdGVfbG9hbl9uZnQoaW1hZ2VfdXJsOiBieXRlcywgc2hvcnRfbmFtZTogYnl0ZXMsIGxvZ25fbmFtZTogYnl0ZXMsIGxvYW5faGFzaDogYnl0ZXMpIC0+IHVpbnQ2NDoKY3JlYXRlX2xvYW5fbmZ0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTY3LTE3MAogICAgLy8gQGFwLnN1YnJvdXRpbmUKICAgIC8vIGRlZiBjcmVhdGVfbG9hbl9uZnQoCiAgICAvLyAgICAgc2VsZiwgaW1hZ2VfdXJsOiBhNC5TdHJpbmcsIHNob3J0X25hbWU6IGFwLkJ5dGVzLCBsb2duX25hbWU6IGFwLkJ5dGVzLCBsb2FuX2hhc2g6IGE0LlN0cmluZwogICAgLy8gKSAtPiBhcC5Bc3NldDoKICAgIHByb3RvIDQgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTczCiAgICAvLyB1cmw9aW1hZ2VfdXJsLm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAtNAogICAgZXh0cmFjdCAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE3NwogICAgLy8gbWV0YWRhdGFfaGFzaD1sb2FuX2hhc2gubmF0aXZlLmJ5dGVzLAogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTc4CiAgICAvLyBtYW5hZ2VyPW9wLkdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTc5LTE4MQogICAgLy8gcmVzZXJ2ZT1vcC5HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gZnJlZXplPW9wLkdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyBjbGF3YmFjaz1vcC5HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZHVwbiAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxODMKICAgIC8vIHR4bi5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldENsYXdiYWNrCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RnJlZXplCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0UmVzZXJ2ZQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldE1hbmFnZXIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRNZXRhZGF0YUhhc2gKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKICAgIGZyYW1lX2RpZyAtMwogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VVJMCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxNzIKICAgIC8vIHRvdGFsPTEsCiAgICBpbnQgMQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxNzEKICAgIC8vIHR4biA9IGFwLml0eG4uQXNzZXRDb25maWcoCiAgICBpbnQgYWNmZwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTc2CiAgICAvLyBmZWU9MTAwMCwKICAgIGludCAxMDAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X3NlcnZpY2UvY29udHJhY3QucHk6MTgzCiAgICAvLyB0eG4uc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxODQKICAgIC8vIHJldHVybiBvcC5JVHhuLmNyZWF0ZWRfYXNzZXRfaWQoKQogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnphaWJhdHN1X3NlcnZpY2UuY29udHJhY3QuWmFpYmF0c3VTZXJ2aWNlLl9faW5pdF9fKCkgLT4gdm9pZDoKX19pbml0X186CiAgICAvLyBzbWFydF9jb250cmFjdHMvemFpYmF0c3Vfc2VydmljZS9jb250cmFjdC5weToxNgogICAgLy8gZGVmIF9faW5pdF9fKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjE3CiAgICAvLyBzZWxmLmFkbWluczogQWRkcmVzc0FycmF5ID0gQWRkcmVzc0FycmF5KCkKICAgIGJ5dGUgImFkbWlucyIKICAgIGJ5dGUgMHgwMDAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3Vfc2VydmljZS5jb250cmFjdC5aYWliYXRzdVNlcnZpY2UuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9zZXJ2aWNlL2NvbnRyYWN0LnB5OjkKICAgIC8vIGNsYXNzIFphaWJhdHN1U2VydmljZShhcC5BUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admins": {
                    "type": "bytes",
                    "key": "admins"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ZaibatsuService",
        "desc": "\n    ATTENTIONS!!!! THIS IS NOT A DRILL\n    * All percentages comming into the smart contract must have been multiple\n      by 100. This is to account for the lack of support for floats on the AVM\n    ",
        "methods": [
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "opt_contract_into_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "authorize_pool_creation",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    },
                    {
                        "type": "application",
                        "name": "folks_feed_oracle"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_decimals"
                    }
                ],
                "returns": {
                    "type": "(uint64,bool)"
                }
            },
            {
                "name": "iniate_p2p_loan_purchase",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "application",
                        "name": "folks_feed_oracle"
                    },
                    {
                        "type": "(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)",
                        "name": "loan_details"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)"
                }
            },
            {
                "name": "complete_p2p_loan_purchase",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "loan_key"
                    },
                    {
                        "type": "(string,string,string,string)",
                        "name": "completion_args"
                    },
                    {
                        "type": "asset",
                        "name": "principal_asset"
                    },
                    {
                        "type": "account",
                        "name": "borrower"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],string,bool,bool,uint8,address,uint64,uint64)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}