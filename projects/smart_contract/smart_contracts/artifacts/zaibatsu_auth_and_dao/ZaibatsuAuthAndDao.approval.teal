#pragma version 10

smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:10
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    method "hello(string)string"
    method "create()bool"
    method "update()bool"
    method "delete()bool"
    method "set_service_contract_address(address)bool"
    method "authorize_pool_creation(axfer,application,uint64)(uint64,bool)"
    method "fund_pool(axfer)(uint64,bool)"
    method "opt_contract_into_asset(asset)bool"
    txna ApplicationArgs 0
    match main_hello_route@3 main_create_route@4 main_update_route@5 main_delete_route@6 main_set_service_contract_address_route@7 main_authorize_pool_creation_route@8 main_fund_pool_route@9 main_opt_contract_into_asset_route@10
    err // reject transaction

main_hello_route@3:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:11
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:10
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txna ApplicationArgs 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:11
    // @a4.abimethod()
    callsub hello
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_create_route@4:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:15
    // @a4.abimethod(create="allow")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    callsub create
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_update_route@5:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:20
    // @a4.abimethod(allow_actions=["UpdateApplication"])
    txn OnCompletion
    int UpdateApplication
    ==
    assert // OnCompletion is UpdateApplication
    txn ApplicationID
    assert // is not creating
    callsub update
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_delete_route@6:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:29
    // @a4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    int DeleteApplication
    ==
    assert // OnCompletion is DeleteApplication
    txn ApplicationID
    assert // is not creating
    callsub delete
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_set_service_contract_address_route@7:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:35
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:10
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txna ApplicationArgs 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:35
    // @a4.abimethod()
    callsub set_service_contract_address
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_authorize_pool_creation_route@8:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:41
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:10
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 1
    btoi
    txnas Applications
    txna ApplicationArgs 2
    btoi
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:41
    // @a4.abimethod()
    callsub authorize_pool_creation
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_fund_pool_route@9:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:64
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:10
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:64
    // @a4.abimethod()
    callsub fund_pool
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_opt_contract_into_asset_route@10:
    // smart_contracts/zaibatsu_base/contract.py:36
    // @a4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:10
    // class ZaibatsuAuthAndDao(ZaibatsuBase):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/zaibatsu_base/contract.py:36
    // @a4.abimethod()
    callsub opt_contract_into_asset
    byte 0x00
    int 0
    uncover 2
    setbit
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.hello(name: bytes) -> bytes:
hello:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:11-12
    // @a4.abimethod()
    // def hello(self, name: a4.String) -> a4.String:
    proto 1 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:13
    // return "Hello, " + name
    frame_dig -1
    extract 2 0
    byte 0x48656c6c6f2c20
    swap
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.create() -> uint64:
create:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:15-16
    // @a4.abimethod(create="allow")
    // def create(self) -> bool:
    proto 0 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:17
    // self.admins.append(a4.Address(ap.Txn.sender))
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:17
    // self.admins.append(a4.Address(ap.Txn.sender))
    app_global_get_ex
    assert // check self.admins exists
    extract 2 0
    txn Sender
    concat
    dup
    len
    int 32
    /
    itob
    extract 6 2
    swap
    concat
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:17
    // self.admins.append(a4.Address(ap.Txn.sender))
    swap
    app_global_put
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:18
    // return True
    int 1
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.update() -> uint64:
update:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:20-21
    // @a4.abimethod(allow_actions=["UpdateApplication"])
    // def update(self) -> bool:
    proto 0 1
    byte ""
    dup
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:22
    // if ap.Txn.sender == op.Global.creator_address:
    txn Sender
    global CreatorAddress
    ==
    bz update_after_if_else@2
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:23
    // return True
    int 1
    frame_bury 0
    retsub

update_after_if_else@2:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:24
    // for index in ap.urange(self.admins.length):
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:24
    // for index in ap.urange(self.admins.length):
    app_global_get_ex
    assert // check self.admins exists
    int 0
    extract_uint16
    frame_bury 1
    int 0
    frame_bury 0

update_for_header@3:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:24
    // for index in ap.urange(self.admins.length):
    frame_dig 0
    frame_dig 1
    <
    bz update_after_for@9
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:25
    // if self.admins[index] == ap.Txn.sender:
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:25
    // if self.admins[index] == ap.Txn.sender:
    app_global_get_ex
    assert // check self.admins exists
    extract 2 0
    frame_dig 0
    int 32
    *
    int 32
    extract3 // on error: Index access is out of bounds
    txn Sender
    ==
    bz update_after_if_else@6
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:26
    // return True
    int 1
    frame_bury 0
    retsub

update_after_if_else@6:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:24
    // for index in ap.urange(self.admins.length):
    frame_dig 0
    int 1
    +
    frame_bury 0
    b update_for_header@3

update_after_for@9:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:27
    // return False
    int 0
    frame_bury 0
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.delete() -> uint64:
delete:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:29-30
    // @a4.abimethod(allow_actions=["DeleteApplication"])
    // def delete(self) -> bool:
    proto 0 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:31
    // if ap.Txn.sender == op.Global.creator_address:
    txn Sender
    global CreatorAddress
    ==
    bz delete_after_if_else@2
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:32
    // return True
    int 1
    retsub

delete_after_if_else@2:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:33
    // return False
    int 0
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.set_service_contract_address(address: bytes) -> uint64:
set_service_contract_address:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:35-36
    // @a4.abimethod()
    // def set_service_contract_address(self, address: a4.Address) -> bool:
    proto 1 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:37
    // self.authorise_txn()
    callsub authorise_txn
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:38
    // self.service_contract_address = address
    byte "service_contract_address"
    frame_dig -1
    app_global_put
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:39
    // return True
    int 1
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.authorise_txn() -> void:
authorise_txn:
    // smart_contracts/zaibatsu_base/contract.py:54-55
    // @ap.subroutine
    // def authorise_txn(self) -> None:
    proto 0 0
    byte ""
    dup
    // smart_contracts/zaibatsu_base/contract.py:56
    // is_authorised = a4.Bool()
    byte 0x00
    // smart_contracts/zaibatsu_base/contract.py:57
    // if ap.Txn.sender == op.Global.creator_address:
    txn Sender
    global CreatorAddress
    ==
    bz authorise_txn_else_body@2
    // smart_contracts/zaibatsu_base/contract.py:58
    // is_authorised = a4.Bool(True)  # noqa: FBT003
    byte 0x80
    frame_bury 2
    b authorise_txn_after_if_else@10

authorise_txn_else_body@2:
    // smart_contracts/zaibatsu_base/contract.py:60
    // for index in ap.urange(self.admins.length):
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_base/contract.py:60
    // for index in ap.urange(self.admins.length):
    app_global_get_ex
    assert // check self.admins exists
    int 0
    extract_uint16
    frame_bury 1
    int 0
    frame_bury 0

authorise_txn_for_header@3:
    // smart_contracts/zaibatsu_base/contract.py:60
    // for index in ap.urange(self.admins.length):
    frame_dig 0
    frame_dig 1
    <
    bz authorise_txn_after_if_else@10
    // smart_contracts/zaibatsu_base/contract.py:61
    // if self.admins[index] == ap.Txn.sender:
    int 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    // smart_contracts/zaibatsu_base/contract.py:61
    // if self.admins[index] == ap.Txn.sender:
    app_global_get_ex
    assert // check self.admins exists
    extract 2 0
    frame_dig 0
    int 32
    *
    int 32
    extract3 // on error: Index access is out of bounds
    txn Sender
    ==
    bz authorise_txn_after_if_else@6
    // smart_contracts/zaibatsu_base/contract.py:62
    // is_authorised = a4.Bool(True)  # noqa: FBT003
    byte 0x80
    frame_bury 2

authorise_txn_after_if_else@6:
    // smart_contracts/zaibatsu_base/contract.py:60
    // for index in ap.urange(self.admins.length):
    frame_dig 0
    int 1
    +
    frame_bury 0
    b authorise_txn_for_header@3

authorise_txn_after_if_else@10:
    // smart_contracts/zaibatsu_base/contract.py:63
    // assert is_authorised, "You are not authorised to perform this action"
    frame_dig 2
    byte 0x00
    !=
    assert // You are not authorised to perform this action
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.authorize_pool_creation(txn: uint64, folks_feed_oracle: uint64, asset_decimals_multiplier: uint64) -> bytes:
authorize_pool_creation:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:41-47
    // @a4.abimethod()
    // def authorize_pool_creation(
    //     self,
    //     txn: gtxn.AssetTransferTransaction,
    //     folks_feed_oracle: ap.Application,
    //     asset_decimals_multiplier: ap.UInt64,
    // ) -> PoolFundResponse:
    proto 3 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:49
    // txn.asset_receiver == self.service_contract_address.native
    frame_dig -3
    gtxns AssetReceiver
    int 0
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:38
    // self.service_contract_address = address
    byte "service_contract_address"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:49
    // txn.asset_receiver == self.service_contract_address.native
    app_global_get_ex
    assert // check self.service_contract_address exists
    ==
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:48-50
    // assert (
    //     txn.asset_receiver == self.service_contract_address.native
    // ), "The asset_receiver mut be the ZaibatsuService account"
    assert // The asset_receiver mut be the ZaibatsuService account
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:51
    // amount_plus_transaction_fee = self.calculate_amt_plus_fee(txn.asset_amount, ap.UInt64(1))
    frame_dig -3
    gtxns AssetAmount
    dup
    int 1
    callsub calculate_amt_plus_fee
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:52
    // fee_amount = amount_plus_transaction_fee - txn.asset_amount
    dig 1
    -
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:53
    // pool_fund_amount = txn.asset_amount - fee_amount
    -
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:55
    // asset_dollar_price = self.get_asset_price(folks_feed_oracle, txn.xfer_asset)
    frame_dig -3
    gtxns XferAsset
    frame_dig -2
    swap
    callsub get_asset_price
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:56
    // pool_fund_dollar_amount = (asset_dollar_price * pool_fund_amount) // asset_decimals_multiplier
    dig 1
    *
    frame_dig -1
    /
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:57
    // assert pool_fund_dollar_amount > ap.UInt64(20), "The asset_amount must be worth greater that 20 dollars"
    int 20
    >
    assert // The asset_amount must be worth greater that 20 dollars
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:59
    // amount=a4.UInt64(pool_fund_amount),
    itob
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:60
    // success=a4.Bool(True),  # noqa: FBT003
    byte 0x80
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:58-61
    // approval = PoolFundResponse(
    //     amount=a4.UInt64(pool_fund_amount),
    //     success=a4.Bool(True),  # noqa: FBT003
    // )
    concat
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:62
    // return approval
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.calculate_amt_plus_fee(amt: uint64, multiples: uint64) -> uint64:
calculate_amt_plus_fee:
    // smart_contracts/zaibatsu_base/contract.py:99-100
    // @ap.subroutine
    // def calculate_amt_plus_fee(self, amt: ap.UInt64, multiples: ap.UInt64) -> ap.UInt64:
    proto 2 1
    // smart_contracts/zaibatsu_base/contract.py:101
    // fee_percentage = ap.UInt64(5) * multiples
    int 5
    frame_dig -1
    *
    // smart_contracts/zaibatsu_base/contract.py:102
    // amt_adjusted_for_decimal = amt * ap.UInt64(10)
    frame_dig -2
    int 10
    *
    // smart_contracts/zaibatsu_base/contract.py:103
    // approx_fee_plus_amt = self.percentage_increase(a4.UInt64(amt_adjusted_for_decimal), a4.UInt64(fee_percentage))
    itob
    swap
    itob
    callsub percentage_increase
    // smart_contracts/zaibatsu_base/contract.py:104
    // corrected_approx_fee_plus_amt = approx_fee_plus_amt.native // ap.UInt64(10)
    btoi
    int 10
    /
    // smart_contracts/zaibatsu_base/contract.py:105
    // return corrected_approx_fee_plus_amt
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.percentage_increase(amount: bytes, increase: bytes) -> bytes:
percentage_increase:
    // smart_contracts/zaibatsu_base/contract.py:118-119
    // @ap.subroutine
    // def percentage_increase(self, amount: a4.UInt64, increase: a4.UInt64) -> a4.UInt64:
    proto 2 1
    // smart_contracts/zaibatsu_base/contract.py:120
    // percentage = self.percentage(amount, increase)
    frame_dig -2
    frame_dig -1
    callsub percentage
    // smart_contracts/zaibatsu_base/contract.py:121
    // results = percentage.native + amount.native
    btoi
    frame_dig -2
    btoi
    +
    // smart_contracts/zaibatsu_base/contract.py:122
    // return a4.UInt64(results)
    itob
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.percentage(amount: bytes, percent: bytes) -> bytes:
percentage:
    // smart_contracts/zaibatsu_base/contract.py:113-114
    // @ap.subroutine
    // def percentage(self, amount: a4.UInt64, percent: a4.UInt64) -> a4.UInt64:
    proto 2 1
    // smart_contracts/zaibatsu_base/contract.py:115
    // result = (percent.native * amount.native) // ap.UInt64(100)
    frame_dig -1
    btoi
    frame_dig -2
    btoi
    *
    int 100
    /
    // smart_contracts/zaibatsu_base/contract.py:116
    // return a4.UInt64(result)
    itob
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.get_asset_price(folks_feed_oracle: uint64, asa: uint64) -> uint64:
get_asset_price:
    // smart_contracts/zaibatsu_base/contract.py:107-108
    // @ap.subroutine
    // def get_asset_price(self, folks_feed_oracle: ap.Application, asa: ap.Asset) -> ap.UInt64:
    proto 2 1
    // smart_contracts/zaibatsu_base/contract.py:109
    // [value, exists] = op.AppGlobal.get_ex_bytes(folks_feed_oracle, op.itob(asa.id))
    frame_dig -1
    itob
    frame_dig -2
    swap
    app_global_get_ex
    // smart_contracts/zaibatsu_base/contract.py:110
    // assert exists, "This aset is not supported"
    assert // This aset is not supported
    // smart_contracts/zaibatsu_base/contract.py:111
    // return op.extract_uint64(value, ap.UInt64(0))
    int 0
    extract_uint64
    retsub


// smart_contracts.zaibatsu_auth_and_dao.contract.ZaibatsuAuthAndDao.fund_pool(txn: uint64) -> bytes:
fund_pool:
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:64-68
    // @a4.abimethod()
    // def fund_pool(
    //     self,
    //     txn: gtxn.AssetTransferTransaction,
    // ) -> PoolFundResponse:
    proto 1 1
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:70
    // txn.asset_receiver == self.service_contract_address.native
    frame_dig -1
    gtxns AssetReceiver
    int 0
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:38
    // self.service_contract_address = address
    byte "service_contract_address"
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:70
    // txn.asset_receiver == self.service_contract_address.native
    app_global_get_ex
    assert // check self.service_contract_address exists
    ==
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:69-71
    // assert (
    //     txn.asset_receiver == self.service_contract_address.native
    // ), "The asset_receiver mut be the ZaibatsuService account"
    assert // The asset_receiver mut be the ZaibatsuService account
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:72
    // amount_plus_transaction_fee = self.calculate_amt_plus_fee(txn.asset_amount, ap.UInt64(1))
    frame_dig -1
    gtxns AssetAmount
    dup
    int 1
    callsub calculate_amt_plus_fee
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:73
    // fee_amount = amount_plus_transaction_fee - txn.asset_amount
    dig 1
    -
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:74
    // pool_fund_amount = txn.asset_amount - fee_amount
    -
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:77
    // amount=a4.UInt64(pool_fund_amount),
    itob
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:78
    // success=a4.Bool(True),  # noqa: FBT003
    byte 0x80
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:76-79
    // approval = PoolFundResponse(
    //     amount=a4.UInt64(pool_fund_amount),
    //     success=a4.Bool(True),  # noqa: FBT003
    // )
    concat
    // smart_contracts/zaibatsu_auth_and_dao/contract.py:80
    // return approval
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.opt_contract_into_asset(asset: uint64) -> uint64:
opt_contract_into_asset:
    // smart_contracts/zaibatsu_base/contract.py:36-37
    // @a4.abimethod()
    // def opt_contract_into_asset(self, asset: ap.Asset) -> bool:
    proto 1 1
    // smart_contracts/zaibatsu_base/contract.py:38
    // self.opt_app_into_asset(asset)
    frame_dig -1
    callsub opt_app_into_asset
    // smart_contracts/zaibatsu_base/contract.py:39
    // return True
    int 1
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.opt_app_into_asset(asset: uint64) -> void:
opt_app_into_asset:
    // smart_contracts/zaibatsu_base/contract.py:41-45
    // ################################################################
    // #####################   Subroutines    #########################
    // ################################################################
    // @ap.subroutine
    // def opt_app_into_asset(self, asset: ap.Asset) -> None:
    proto 1 0
    // smart_contracts/zaibatsu_base/contract.py:50
    // asset_receiver=ap.Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/zaibatsu_base/contract.py:52
    // txn.submit()
    itxn_begin
    itxn_field AssetReceiver
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/zaibatsu_base/contract.py:47
    // asset_amount=0,
    int 0
    itxn_field AssetAmount
    // smart_contracts/zaibatsu_base/contract.py:46
    // txn = ap.itxn.AssetTransfer(
    int axfer
    itxn_field TypeEnum
    // smart_contracts/zaibatsu_base/contract.py:48
    // fee=1000,
    int 1000
    itxn_field Fee
    // smart_contracts/zaibatsu_base/contract.py:52
    // txn.submit()
    itxn_submit
    retsub


// smart_contracts.zaibatsu_base.contract.ZaibatsuBase.__init__() -> void:
__init__:
    // smart_contracts/zaibatsu_base/contract.py:12
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/zaibatsu_base/contract.py:13
    // self.admins: AddressArray = AddressArray()
    byte "admins"
    byte 0x0000
    app_global_put
    // smart_contracts/zaibatsu_base/contract.py:14
    // self.service_contract: a4.Address = a4.Address()
    byte "service_contract"
    global ZeroAddress
    app_global_put
    retsub
