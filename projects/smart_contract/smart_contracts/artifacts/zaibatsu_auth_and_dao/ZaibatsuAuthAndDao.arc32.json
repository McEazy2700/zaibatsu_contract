{
    "hints": {
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create()bool": {
            "call_config": {
                "no_op": "ALL"
            }
        },
        "update()bool": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete()bool": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "set_service_contract_address(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "authorize_pool_creation(axfer,application,string,string,string,string,uint64,uint64)(string,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolInfo",
                    "elements": [
                        [
                            "pool_key",
                            "string"
                        ],
                        [
                            "token_balance",
                            "uint64"
                        ],
                        [
                            "pool_asset_id",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "optin_pool_asset(axfer,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund_pool(string,uint64,account,application,axfer,asset,uint64)(uint64,bool)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolFundResponse",
                    "elements": [
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "success",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "approve_pool_vote(string,axfer)(uint64,string)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolVoteApprovalResponse",
                    "elements": [
                        [
                            "multiplier",
                            "uint64"
                        ],
                        [
                            "txn_id",
                            "string"
                        ]
                    ]
                }
            }
        },
        "opt_contract_into_asset(asset)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3VfYXV0aF9hbmRfZGFvLmNvbnRyYWN0LlphaWJhdHN1QXV0aEFuZERhby5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X2F1dGhfYW5kX2Rhby9jb250cmFjdC5weToxNAogICAgLy8gY2xhc3MgWmFpYmF0c3VBdXRoQW5kRGFvKFphaWJhdHN1QmFzZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admins": {
                    "type": "bytes",
                    "key": "admins"
                },
                "service_contract": {
                    "type": "bytes",
                    "key": "service_contract"
                },
                "service_contract_address": {
                    "type": "bytes",
                    "key": "service_contract_address"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ZaibatsuAuthAndDao",
        "methods": [
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "update",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "delete",
                "args": [],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "set_service_contract_address",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "authorize_pool_creation",
                "args": [
                    {
                        "type": "axfer",
                        "name": "txn"
                    },
                    {
                        "type": "application",
                        "name": "folks_feed_oracle"
                    },
                    {
                        "type": "string",
                        "name": "pool_key"
                    },
                    {
                        "type": "string",
                        "name": "image_url"
                    },
                    {
                        "type": "string",
                        "name": "token_unit_name"
                    },
                    {
                        "type": "string",
                        "name": "token_asset_name"
                    },
                    {
                        "type": "uint64",
                        "name": "max_contributors"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_decimals_multiplier"
                    }
                ],
                "returns": {
                    "type": "(string,uint64,uint64)"
                }
            },
            {
                "name": "optin_pool_asset",
                "args": [
                    {
                        "type": "axfer",
                        "name": "optin_txn"
                    },
                    {
                        "type": "string",
                        "name": "pool_key"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "fund_pool",
                "args": [
                    {
                        "type": "string",
                        "name": "pool_key"
                    },
                    {
                        "type": "uint64",
                        "name": "fund_amount"
                    },
                    {
                        "type": "account",
                        "name": "user_account"
                    },
                    {
                        "type": "application",
                        "name": "folks_feed_oracle"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    },
                    {
                        "type": "asset",
                        "name": "pool_asset"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_decimals_multiplier"
                    }
                ],
                "returns": {
                    "type": "(uint64,bool)"
                }
            },
            {
                "name": "approve_pool_vote",
                "args": [
                    {
                        "type": "string",
                        "name": "pool_key"
                    },
                    {
                        "type": "axfer",
                        "name": "txn"
                    }
                ],
                "returns": {
                    "type": "(uint64,string)"
                }
            },
            {
                "name": "opt_contract_into_asset",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}