/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "hello(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "create()bool": {
      "call_config": {
        "no_op": "ALL"
      }
    },
    "update()bool": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "delete()bool": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "set_service_contract_address(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "authorize_pool_creation(axfer,application,uint64)(uint64,bool)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "PoolFundResponse",
          "elements": [
            [
              "amount",
              "uint64"
            ],
            [
              "success",
              "bool"
            ]
          ]
        }
      }
    },
    "fund_pool(axfer)(uint64,bool)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "PoolFundResponse",
          "elements": [
            [
              "amount",
              "uint64"
            ],
            [
              "success",
              "bool"
            ]
          ]
        }
      }
    },
    "opt_contract_into_asset(asset)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3VfYXV0aF9hbmRfZGFvLmNvbnRyYWN0LlphaWJhdHN1QXV0aEFuZERhby5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc21hcnRfY29udHJhY3RzL3phaWJhdHN1X2F1dGhfYW5kX2Rhby9jb250cmFjdC5weToxMAogICAgLy8gY2xhc3MgWmFpYmF0c3VBdXRoQW5kRGFvKFphaWJhdHN1QmFzZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "admins": {
          "type": "bytes",
          "key": "admins"
        },
        "service_contract": {
          "type": "bytes",
          "key": "service_contract"
        },
        "service_contract_address": {
          "type": "bytes",
          "key": "service_contract_address"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "ZaibatsuAuthAndDao",
    "methods": [
      {
        "name": "hello",
        "args": [
          {
            "type": "string",
            "name": "name"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "create",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "update",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "delete",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "set_service_contract_address",
        "args": [
          {
            "type": "address",
            "name": "address"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "authorize_pool_creation",
        "args": [
          {
            "type": "axfer",
            "name": "txn"
          },
          {
            "type": "application",
            "name": "folks_feed_oracle"
          },
          {
            "type": "uint64",
            "name": "asset_decimals_multiplier"
          }
        ],
        "returns": {
          "type": "(uint64,bool)"
        }
      },
      {
        "name": "fund_pool",
        "args": [
          {
            "type": "axfer",
            "name": "txn"
          }
        ],
        "returns": {
          "type": "(uint64,bool)"
        }
      },
      {
        "name": "opt_contract_into_asset",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          }
        ],
        "returns": {
          "type": "bool"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the ZaibatsuAuthAndDao smart contract.
 */
export type ZaibatsuAuthAndDao = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
  & Record<'hello(string)string' | 'hello', {
    argsObj: {
      name: string
    }
    argsTuple: [name: string]
    returns: string
  }>
  & Record<'create()bool' | 'create', {
    argsObj: {
    }
    argsTuple: []
    returns: boolean
  }>
  & Record<'update()bool' | 'update', {
    argsObj: {
    }
    argsTuple: []
    returns: boolean
  }>
  & Record<'delete()bool' | 'delete', {
    argsObj: {
    }
    argsTuple: []
    returns: boolean
  }>
  & Record<'set_service_contract_address(address)bool' | 'set_service_contract_address', {
    argsObj: {
      address: string
    }
    argsTuple: [address: string]
    returns: boolean
  }>
  & Record<'authorize_pool_creation(axfer,application,uint64)(uint64,bool)' | 'authorize_pool_creation', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      folksFeedOracle: number | bigint
      assetDecimalsMultiplier: bigint | number
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, folksFeedOracle: number | bigint, assetDecimalsMultiplier: bigint | number]
    returns: PoolFundResponse
  }>
  & Record<'fund_pool(axfer)(uint64,bool)' | 'fund_pool', {
    argsObj: {
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
    }
    argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
    returns: PoolFundResponse
  }>
  & Record<'opt_contract_into_asset(asset)bool' | 'opt_contract_into_asset', {
    argsObj: {
      asset: number | bigint
    }
    argsTuple: [asset: number | bigint]
    returns: boolean
  }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      admins?: BinaryState
      serviceContract?: BinaryState
      serviceContractAddress?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ZaibatsuAuthAndDaoSig = keyof ZaibatsuAuthAndDao['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ZaibatsuAuthAndDaoSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a PoolFundResponse result as a struct
 */
export type PoolFundResponse = {
  amount: bigint
  success: boolean
}
/**
 * Converts the tuple representation of a PoolFundResponse to the struct representation
 */
export function PoolFundResponse([amount, success]: [bigint, boolean]) {
  return {
    amount,
    success,
  }
}
/**
 * Maps a method signature from the ZaibatsuAuthAndDao smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ZaibatsuAuthAndDaoSig> = ZaibatsuAuthAndDao['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ZaibatsuAuthAndDao smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ZaibatsuAuthAndDaoSig> = ZaibatsuAuthAndDao['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ZaibatsuAuthAndDaoCreateCalls = (typeof ZaibatsuAuthAndDaoCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ZaibatsuAuthAndDaoCreateCallParams =
  | (TypedCallParams<'create()bool'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type ZaibatsuAuthAndDaoUpdateCalls = (typeof ZaibatsuAuthAndDaoCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type ZaibatsuAuthAndDaoUpdateCallParams =
  | TypedCallParams<'update()bool'>
/**
 * A factory for available 'delete' calls
 */
export type ZaibatsuAuthAndDaoDeleteCalls = (typeof ZaibatsuAuthAndDaoCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type ZaibatsuAuthAndDaoDeleteCallParams =
  | TypedCallParams<'delete()bool'>
/**
 * Defines arguments required for the deploy method.
 */
export type ZaibatsuAuthAndDaoDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ZaibatsuAuthAndDaoCreateCalls) => ZaibatsuAuthAndDaoCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: ZaibatsuAuthAndDaoUpdateCalls) => ZaibatsuAuthAndDaoUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: ZaibatsuAuthAndDaoDeleteCalls) => ZaibatsuAuthAndDaoDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ZaibatsuAuthAndDaoCallFactory {
  /**
   * Gets available create call factories
   */
  // @ts-ignore
  static get create() {
    return {
      /**
       * Constructs a create call for the ZaibatsuAuthAndDao smart contract using the create()bool ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(args: MethodArgs<'create()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'create()bool' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the ZaibatsuAuthAndDao smart contract using the update()bool ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      update(args: MethodArgs<'update()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'update()bool' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the ZaibatsuAuthAndDao smart contract using the delete()bool ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      delete(args: MethodArgs<'delete()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'delete()bool' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'hello(string)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create()bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  // @ts-ignore
  static create(args: MethodArgs<'create()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create()bool' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_service_contract_address(address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setServiceContractAddress(args: MethodArgs<'set_service_contract_address(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_service_contract_address(address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.address],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the authorize_pool_creation(axfer,application,uint64)(uint64,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static authorizePoolCreation(args: MethodArgs<'authorize_pool_creation(axfer,application,uint64)(uint64,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'authorize_pool_creation(axfer,application,uint64)(uint64,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn, args.folksFeedOracle, args.assetDecimalsMultiplier],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fund_pool(axfer)(uint64,bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fundPool(args: MethodArgs<'fund_pool(axfer)(uint64,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fund_pool(axfer)(uint64,bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the opt_contract_into_asset(asset)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optContractIntoAsset(args: MethodArgs<'opt_contract_into_asset(asset)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'opt_contract_into_asset(asset)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ZaibatsuAuthAndDao smart contract
 */
export class ZaibatsuAuthAndDaoClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ZaibatsuAuthAndDaoClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
    return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ZaibatsuAuthAndDao['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ZaibatsuAuthAndDao smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ZaibatsuAuthAndDaoDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ZaibatsuAuthAndDaoCallFactory.create)
    const updateArgs = params.updateCall?.(ZaibatsuAuthAndDaoCallFactory.update)
    const deleteArgs = params.deleteCall?.(ZaibatsuAuthAndDaoCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  // @ts-ignore
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ZaibatsuAuthAndDao smart contract using the create()bool ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(args: MethodArgs<'create()bool'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'create()bool'>, AppCreateCallTransactionResult>(await $this.appClient.create(ZaibatsuAuthAndDaoCallFactory.create.create(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the ZaibatsuAuthAndDao smart contract using the update()bool ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async update(args: MethodArgs<'update()bool'>, params: AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'update()bool'>, AppUpdateCallTransactionResult>(await $this.appClient.update(ZaibatsuAuthAndDaoCallFactory.update.update(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the ZaibatsuAuthAndDao smart contract using the delete()bool ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async delete(args: MethodArgs<'delete()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'delete()bool'>>(await $this.appClient.delete(ZaibatsuAuthAndDaoCallFactory.delete.delete(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ZaibatsuAuthAndDao smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hello(args: MethodArgs<'hello(string)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuAuthAndDaoCallFactory.hello(args, params))
  }

  /**
   * Calls the create()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  // @ts-ignore
  public create(args: MethodArgs<'create()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    // @ts-ignore
    return this.call(ZaibatsuAuthAndDaoCallFactory.create(args, params))
  }

  /**
   * Calls the set_service_contract_address(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setServiceContractAddress(args: MethodArgs<'set_service_contract_address(address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuAuthAndDaoCallFactory.setServiceContractAddress(args, params))
  }

  /**
   * Calls the authorize_pool_creation(axfer,application,uint64)(uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public authorizePoolCreation(args: MethodArgs<'authorize_pool_creation(axfer,application,uint64)(uint64,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuAuthAndDaoCallFactory.authorizePoolCreation(args, params), PoolFundResponse)
  }

  /**
   * Calls the fund_pool(axfer)(uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fundPool(args: MethodArgs<'fund_pool(axfer)(uint64,bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuAuthAndDaoCallFactory.fundPool(args, params), PoolFundResponse)
  }

  /**
   * Calls the opt_contract_into_asset(asset)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optContractIntoAsset(args: MethodArgs<'opt_contract_into_asset(asset)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuAuthAndDaoCallFactory.optContractIntoAsset(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ZaibatsuAuthAndDao['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get admins() {
        return ZaibatsuAuthAndDaoClient.getBinaryState(state, 'admins')
      },
      get serviceContract() {
        return ZaibatsuAuthAndDaoClient.getBinaryState(state, 'service_contract')
      },
      get serviceContractAddress() {
        return ZaibatsuAuthAndDaoClient.getBinaryState(state, 'service_contract_address')
      },
    }
  }

  public compose(): ZaibatsuAuthAndDaoComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain: Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      hello(args: MethodArgs<'hello(string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hello(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      create(args: MethodArgs<'create()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        // @ts-ignore
        promiseChain = promiseChain.then(() => client.create(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      setServiceContractAddress(args: MethodArgs<'set_service_contract_address(address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setServiceContractAddress(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      authorizePoolCreation(args: MethodArgs<'authorize_pool_creation(axfer,application,uint64)(uint64,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.authorizePoolCreation(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(PoolFundResponse)
        return this
      },
      fundPool(args: MethodArgs<'fund_pool(axfer)(uint64,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fundPool(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(PoolFundResponse)
        return this
      },
      optContractIntoAsset(args: MethodArgs<'opt_contract_into_asset(asset)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optContractIntoAsset(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          update(args: MethodArgs<'update()bool'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.update(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          delete(args: MethodArgs<'delete()bool'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.delete(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ZaibatsuAuthAndDaoComposer
  }
}
export type ZaibatsuAuthAndDaoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(args: MethodArgs<'hello(string)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuAuthAndDaoComposer<[...TReturns, MethodReturn<'hello(string)string'>]>

  /**
   * Calls the create()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(args: MethodArgs<'create()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuAuthAndDaoComposer<[...TReturns, MethodReturn<'create()bool'>]>

  /**
   * Calls the set_service_contract_address(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setServiceContractAddress(args: MethodArgs<'set_service_contract_address(address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuAuthAndDaoComposer<[...TReturns, MethodReturn<'set_service_contract_address(address)bool'>]>

  /**
   * Calls the authorize_pool_creation(axfer,application,uint64)(uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  authorizePoolCreation(args: MethodArgs<'authorize_pool_creation(axfer,application,uint64)(uint64,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuAuthAndDaoComposer<[...TReturns, MethodReturn<'authorize_pool_creation(axfer,application,uint64)(uint64,bool)'>]>

  /**
   * Calls the fund_pool(axfer)(uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundPool(args: MethodArgs<'fund_pool(axfer)(uint64,bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuAuthAndDaoComposer<[...TReturns, MethodReturn<'fund_pool(axfer)(uint64,bool)'>]>

  /**
   * Calls the opt_contract_into_asset(asset)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optContractIntoAsset(args: MethodArgs<'opt_contract_into_asset(asset)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuAuthAndDaoComposer<[...TReturns, MethodReturn<'opt_contract_into_asset(asset)bool'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the ZaibatsuAuthAndDao smart contract using the update()bool ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(args: MethodArgs<'update()bool'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): ZaibatsuAuthAndDaoComposer<[...TReturns, MethodReturn<'update()bool'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the ZaibatsuAuthAndDao smart contract using the delete()bool ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(args: MethodArgs<'delete()bool'>, params?: AppClientComposeCallCoreParams): ZaibatsuAuthAndDaoComposer<[...TReturns, MethodReturn<'delete()bool'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the ZaibatsuAuthAndDao smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuAuthAndDaoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ZaibatsuAuthAndDaoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<ZaibatsuAuthAndDaoComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<ZaibatsuAuthAndDaoComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type ZaibatsuAuthAndDaoComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type ZaibatsuAuthAndDaoComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
