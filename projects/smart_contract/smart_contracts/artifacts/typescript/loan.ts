/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "loan_details": {
          "name": "LoanDetails",
          "elements": [
            [
              "loan_key",
              "string"
            ],
            [
              "loan_type",
              "string"
            ],
            [
              "tenure",
              "uint8"
            ],
            [
              "principal_asset_id",
              "uint64"
            ],
            [
              "collateral_asset_id",
              "uint64"
            ],
            [
              "interest_asset_amount",
              "uint64"
            ],
            [
              "principal_asset_amount",
              "uint64"
            ],
            [
              "collateral_asset_amount",
              "uint64"
            ],
            [
              "early_payment_penalty_amount",
              "uint64"
            ],
            [
              "payment_rounds",
              "uint8"
            ],
            [
              "payment_completion_timestamp",
              "uint64"
            ],
            [
              "payment_recipients",
              "(uint64,address)[]"
            ],
            [
              "collateral_paid",
              "bool"
            ],
            [
              "principal_paid",
              "bool"
            ],
            [
              "completed_payment_rounds",
              "uint8"
            ],
            [
              "borrower",
              "address"
            ],
            [
              "lender_nft_asser_id",
              "uint64"
            ],
            [
              "borrower_nft_asser_id",
              "uint64"
            ]
          ]
        },
        "output": {
          "name": "LoanDetails",
          "elements": [
            [
              "loan_key",
              "string"
            ],
            [
              "loan_type",
              "string"
            ],
            [
              "tenure",
              "uint8"
            ],
            [
              "principal_asset_id",
              "uint64"
            ],
            [
              "collateral_asset_id",
              "uint64"
            ],
            [
              "interest_asset_amount",
              "uint64"
            ],
            [
              "principal_asset_amount",
              "uint64"
            ],
            [
              "collateral_asset_amount",
              "uint64"
            ],
            [
              "early_payment_penalty_amount",
              "uint64"
            ],
            [
              "payment_rounds",
              "uint8"
            ],
            [
              "payment_completion_timestamp",
              "uint64"
            ],
            [
              "payment_recipients",
              "(uint64,address)[]"
            ],
            [
              "collateral_paid",
              "bool"
            ],
            [
              "principal_paid",
              "bool"
            ],
            [
              "completed_payment_rounds",
              "uint8"
            ],
            [
              "borrower",
              "address"
            ],
            [
              "lender_nft_asser_id",
              "uint64"
            ],
            [
              "borrower_nft_asser_id",
              "uint64"
            ]
          ]
        }
      }
    },
    "complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "completion_args": {
          "name": "CompleteLoanArgs",
          "elements": [
            [
              "loan_unit_name",
              "string"
            ],
            [
              "lender_nft_image_url",
              "string"
            ],
            [
              "borrower_nft_image_url",
              "string"
            ],
            [
              "loan_hash",
              "string"
            ]
          ]
        },
        "output": {
          "name": "LoanDetails",
          "elements": [
            [
              "loan_key",
              "string"
            ],
            [
              "loan_type",
              "string"
            ],
            [
              "tenure",
              "uint8"
            ],
            [
              "principal_asset_id",
              "uint64"
            ],
            [
              "collateral_asset_id",
              "uint64"
            ],
            [
              "interest_asset_amount",
              "uint64"
            ],
            [
              "principal_asset_amount",
              "uint64"
            ],
            [
              "collateral_asset_amount",
              "uint64"
            ],
            [
              "early_payment_penalty_amount",
              "uint64"
            ],
            [
              "payment_rounds",
              "uint8"
            ],
            [
              "payment_completion_timestamp",
              "uint64"
            ],
            [
              "payment_recipients",
              "(uint64,address)[]"
            ],
            [
              "collateral_paid",
              "bool"
            ],
            [
              "principal_paid",
              "bool"
            ],
            [
              "completed_payment_rounds",
              "uint8"
            ],
            [
              "borrower",
              "address"
            ],
            [
              "lender_nft_asser_id",
              "uint64"
            ],
            [
              "borrower_nft_asser_id",
              "uint64"
            ]
          ]
        }
      }
    },
    "complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "completion_args": {
          "name": "CompleteLoanArgs",
          "elements": [
            [
              "loan_unit_name",
              "string"
            ],
            [
              "lender_nft_image_url",
              "string"
            ],
            [
              "borrower_nft_image_url",
              "string"
            ],
            [
              "loan_hash",
              "string"
            ]
          ]
        },
        "output": {
          "name": "LoanDetails",
          "elements": [
            [
              "loan_key",
              "string"
            ],
            [
              "loan_type",
              "string"
            ],
            [
              "tenure",
              "uint8"
            ],
            [
              "principal_asset_id",
              "uint64"
            ],
            [
              "collateral_asset_id",
              "uint64"
            ],
            [
              "interest_asset_amount",
              "uint64"
            ],
            [
              "principal_asset_amount",
              "uint64"
            ],
            [
              "collateral_asset_amount",
              "uint64"
            ],
            [
              "early_payment_penalty_amount",
              "uint64"
            ],
            [
              "payment_rounds",
              "uint8"
            ],
            [
              "payment_completion_timestamp",
              "uint64"
            ],
            [
              "payment_recipients",
              "(uint64,address)[]"
            ],
            [
              "collateral_paid",
              "bool"
            ],
            [
              "principal_paid",
              "bool"
            ],
            [
              "completed_payment_rounds",
              "uint8"
            ],
            [
              "borrower",
              "address"
            ],
            [
              "lender_nft_asser_id",
              "uint64"
            ],
            [
              "borrower_nft_asser_id",
              "uint64"
            ]
          ]
        }
      }
    },
    "initiate_loan_repayment(byte[],string,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "payment_recipient": {
          "name": "PaymentReciepient",
          "elements": [
            [
              "payment_percentage",
              "uint64"
            ],
            [
              "recipient_address",
              "address"
            ]
          ]
        },
        "output": {
          "name": "ExecuteLoanRepaymentResponse",
          "elements": [
            [
              "loan_repayment_complete",
              "bool"
            ],
            [
              "percentage_paid",
              "uint64"
            ]
          ]
        }
      }
    },
    "clean_up_loan_repayment(string,account)(bool)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "CleanUpLoanRepaymentResponse",
          "elements": [
            [
              "loan_repayment_complete",
              "bool"
            ]
          ]
        }
      }
    },
    "create()bool": {
      "call_config": {
        "no_op": "ALL"
      }
    },
    "update()bool": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "delete()bool": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "opt_contract_into_asset(asset)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuemFpYmF0c3VfbG9hbi5jb250cmFjdC5aYWliYXRzdUxvYW4uY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy96YWliYXRzdV9sb2FuL2NvbnRyYWN0LnB5OjE3CiAgICAvLyBjbGFzcyBaYWliYXRzdUxvYW4oWmFpYmF0c3VCYXNlKToKICAgIGludCAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "admins": {
          "type": "bytes",
          "key": "admins"
        },
        "service_contract": {
          "type": "bytes",
          "key": "service_contract"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "ZaibatsuLoan",
    "desc": "\n    ATTENTIONS!!!! THIS IS NOT A DRILL\n    * All percentages comming into the smart contract must have been multiple\n      by 100. This is to account for the lack of support for floats on the AVM\n    ",
    "methods": [
      {
        "name": "initiate_loan_purchase",
        "args": [
          {
            "type": "byte[]",
            "name": "loan_key"
          },
          {
            "type": "application",
            "name": "folks_feed_oracle"
          },
          {
            "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)",
            "name": "loan_details"
          },
          {
            "type": "axfer",
            "name": "txn"
          }
        ],
        "returns": {
          "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
        }
      },
      {
        "name": "complete_non_p2p_loan_purchase",
        "args": [
          {
            "type": "byte[]",
            "name": "loan_key"
          },
          {
            "type": "(string,string,string,string)",
            "name": "completion_args"
          },
          {
            "type": "asset",
            "name": "principal_asset"
          },
          {
            "type": "account",
            "name": "borrower"
          }
        ],
        "returns": {
          "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
        }
      },
      {
        "name": "complete_p2p_loan_purchase",
        "args": [
          {
            "type": "byte[]",
            "name": "loan_key"
          },
          {
            "type": "(string,string,string,string)",
            "name": "completion_args"
          },
          {
            "type": "asset",
            "name": "principal_asset"
          },
          {
            "type": "account",
            "name": "borrower"
          },
          {
            "type": "axfer",
            "name": "txn"
          }
        ],
        "returns": {
          "type": "(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)"
        }
      },
      {
        "name": "initiate_loan_repayment",
        "args": [
          {
            "type": "byte[]",
            "name": "loan_key"
          },
          {
            "type": "string",
            "name": "repayment_key"
          },
          {
            "type": "axfer",
            "name": "txn"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "execute_loan_repayment",
        "args": [
          {
            "type": "string",
            "name": "repayment_key"
          },
          {
            "type": "account",
            "name": "recipient_account"
          },
          {
            "type": "(uint64,address)",
            "name": "payment_recipient"
          },
          {
            "type": "asset",
            "name": "principal_asset"
          }
        ],
        "returns": {
          "type": "(bool,uint64)"
        }
      },
      {
        "name": "clean_up_loan_repayment",
        "args": [
          {
            "type": "string",
            "name": "repayment_key"
          },
          {
            "type": "account",
            "name": "borrower_account"
          }
        ],
        "returns": {
          "type": "(bool)"
        }
      },
      {
        "name": "create",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "update",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "delete",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "opt_contract_into_asset",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          }
        ],
        "returns": {
          "type": "bool"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the ZaibatsuLoan smart contract.
 */
export type ZaibatsuLoan = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
  & Record<'initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)' | 'initiate_loan_purchase', {
    argsObj: {
      loanKey: Uint8Array
      folksFeedOracle: number | bigint
      loanDetails: [string, string, number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, number, bigint | number, [bigint | number, string][], boolean, boolean, number, string, bigint | number, bigint | number]
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
    }
    argsTuple: [loanKey: Uint8Array, folksFeedOracle: number | bigint, loanDetails: [string, string, number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, number, bigint | number, [bigint | number, string][], boolean, boolean, number, string, bigint | number, bigint | number], txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
    returns: LoanDetails
  }>
  & Record<'complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)' | 'complete_non_p2p_loan_purchase', {
    argsObj: {
      loanKey: Uint8Array
      completionArgs: [string, string, string, string]
      principalAsset: number | bigint
      borrower: string | Uint8Array
    }
    argsTuple: [loanKey: Uint8Array, completionArgs: [string, string, string, string], principalAsset: number | bigint, borrower: string | Uint8Array]
    returns: LoanDetails
  }>
  & Record<'complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)' | 'complete_p2p_loan_purchase', {
    argsObj: {
      loanKey: Uint8Array
      completionArgs: [string, string, string, string]
      principalAsset: number | bigint
      borrower: string | Uint8Array
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
    }
    argsTuple: [loanKey: Uint8Array, completionArgs: [string, string, string, string], principalAsset: number | bigint, borrower: string | Uint8Array, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
    returns: LoanDetails
  }>
  & Record<'initiate_loan_repayment(byte[],string,axfer)void' | 'initiate_loan_repayment', {
    argsObj: {
      loanKey: Uint8Array
      repaymentKey: string
      txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
    }
    argsTuple: [loanKey: Uint8Array, repaymentKey: string, txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
    returns: void
  }>
  & Record<'execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)' | 'execute_loan_repayment', {
    argsObj: {
      repaymentKey: string
      recipientAccount: string | Uint8Array
      paymentRecipient: [bigint | number, string]
      principalAsset: number | bigint
    }
    argsTuple: [repaymentKey: string, recipientAccount: string | Uint8Array, paymentRecipient: [bigint | number, string], principalAsset: number | bigint]
    returns: ExecuteLoanRepaymentResponse
  }>
  & Record<'clean_up_loan_repayment(string,account)(bool)' | 'clean_up_loan_repayment', {
    argsObj: {
      repaymentKey: string
      borrowerAccount: string | Uint8Array
    }
    argsTuple: [repaymentKey: string, borrowerAccount: string | Uint8Array]
    returns: CleanUpLoanRepaymentResponse
  }>
  & Record<'create()bool' | 'create', {
    argsObj: {
    }
    argsTuple: []
    returns: boolean
  }>
  & Record<'update()bool' | 'update', {
    argsObj: {
    }
    argsTuple: []
    returns: boolean
  }>
  & Record<'delete()bool' | 'delete', {
    argsObj: {
    }
    argsTuple: []
    returns: boolean
  }>
  & Record<'opt_contract_into_asset(asset)bool' | 'opt_contract_into_asset', {
    argsObj: {
      asset: number | bigint
    }
    argsTuple: [asset: number | bigint]
    returns: boolean
  }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      admins?: BinaryState
      serviceContract?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ZaibatsuLoanSig = keyof ZaibatsuLoan['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ZaibatsuLoanSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a LoanDetails result as a struct
 */
export type LoanDetails = {
  loanKey: string
  loanType: string
  tenure: number
  principalAssetId: bigint
  collateralAssetId: bigint
  interestAssetAmount: bigint
  principalAssetAmount: bigint
  collateralAssetAmount: bigint
  earlyPaymentPenaltyAmount: bigint
  paymentRounds: number
  paymentCompletionTimestamp: bigint
  paymentRecipients: [bigint, string][]
  collateralPaid: boolean
  principalPaid: boolean
  completedPaymentRounds: number
  borrower: string
  lenderNftAsserId: bigint
  borrowerNftAsserId: bigint
}
/**
 * Converts the tuple representation of a LoanDetails to the struct representation
 */
export function LoanDetails([loanKey, loanType, tenure, principalAssetId, collateralAssetId, interestAssetAmount, principalAssetAmount, collateralAssetAmount, earlyPaymentPenaltyAmount, paymentRounds, paymentCompletionTimestamp, paymentRecipients, collateralPaid, principalPaid, completedPaymentRounds, borrower, lenderNftAsserId, borrowerNftAsserId]: [string, string, number, bigint, bigint, bigint, bigint, bigint, bigint, number, bigint, [bigint, string][], boolean, boolean, number, string, bigint, bigint]) {
  return {
    loanKey,
    loanType,
    tenure,
    principalAssetId,
    collateralAssetId,
    interestAssetAmount,
    principalAssetAmount,
    collateralAssetAmount,
    earlyPaymentPenaltyAmount,
    paymentRounds,
    paymentCompletionTimestamp,
    paymentRecipients,
    collateralPaid,
    principalPaid,
    completedPaymentRounds,
    borrower,
    lenderNftAsserId,
    borrowerNftAsserId,
  }
}
/**
 * Represents a CompleteLoanArgs result as a struct
 */
export type CompleteLoanArgs = {
  loanUnitName: string
  lenderNftImageUrl: string
  borrowerNftImageUrl: string
  loanHash: string
}
/**
 * Converts the tuple representation of a CompleteLoanArgs to the struct representation
 */
export function CompleteLoanArgs([loanUnitName, lenderNftImageUrl, borrowerNftImageUrl, loanHash]: [string, string, string, string]) {
  return {
    loanUnitName,
    lenderNftImageUrl,
    borrowerNftImageUrl,
    loanHash,
  }
}
/**
 * Represents a PaymentReciepient result as a struct
 */
export type PaymentReciepient = {
  paymentPercentage: bigint
  recipientAddress: string
}
/**
 * Converts the tuple representation of a PaymentReciepient to the struct representation
 */
export function PaymentReciepient([paymentPercentage, recipientAddress]: [bigint, string]) {
  return {
    paymentPercentage,
    recipientAddress,
  }
}
/**
 * Represents a ExecuteLoanRepaymentResponse result as a struct
 */
export type ExecuteLoanRepaymentResponse = {
  loanRepaymentComplete: boolean
  percentagePaid: bigint
}
/**
 * Converts the tuple representation of a ExecuteLoanRepaymentResponse to the struct representation
 */
export function ExecuteLoanRepaymentResponse([loanRepaymentComplete, percentagePaid]: [boolean, bigint]) {
  return {
    loanRepaymentComplete,
    percentagePaid,
  }
}
/**
 * Represents a CleanUpLoanRepaymentResponse result as a struct
 */
export type CleanUpLoanRepaymentResponse = {
  loanRepaymentComplete: boolean
}
/**
 * Converts the tuple representation of a CleanUpLoanRepaymentResponse to the struct representation
 */
export function CleanUpLoanRepaymentResponse([loanRepaymentComplete]: [boolean]) {
  return {
    loanRepaymentComplete,
  }
}
/**
 * Maps a method signature from the ZaibatsuLoan smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ZaibatsuLoanSig> = ZaibatsuLoan['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ZaibatsuLoan smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ZaibatsuLoanSig> = ZaibatsuLoan['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ZaibatsuLoanCreateCalls = (typeof ZaibatsuLoanCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ZaibatsuLoanCreateCallParams =
  | (TypedCallParams<'create()bool'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type ZaibatsuLoanUpdateCalls = (typeof ZaibatsuLoanCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type ZaibatsuLoanUpdateCallParams =
  | TypedCallParams<'update()bool'>
/**
 * A factory for available 'delete' calls
 */
export type ZaibatsuLoanDeleteCalls = (typeof ZaibatsuLoanCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type ZaibatsuLoanDeleteCallParams =
  | TypedCallParams<'delete()bool'>
/**
 * Defines arguments required for the deploy method.
 */
export type ZaibatsuLoanDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ZaibatsuLoanCreateCalls) => ZaibatsuLoanCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: ZaibatsuLoanUpdateCalls) => ZaibatsuLoanUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: ZaibatsuLoanDeleteCalls) => ZaibatsuLoanDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ZaibatsuLoanCallFactory {
  /**
   * Gets available create call factories
   */
  // @ts-ignore
  static get create() {
    return {
      /**
       * Constructs a create call for the ZaibatsuLoan smart contract using the create()bool ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(args: MethodArgs<'create()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'create()bool' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the ZaibatsuLoan smart contract using the update()bool ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      update(args: MethodArgs<'update()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'update()bool' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the ZaibatsuLoan smart contract using the delete()bool ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      delete(args: MethodArgs<'delete()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'delete()bool' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initiateLoanPurchase(args: MethodArgs<'initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.loanKey, args.folksFeedOracle, args.loanDetails, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static completeNonP2pLoanPurchase(args: MethodArgs<'complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.loanKey, args.completionArgs, args.principalAsset, args.borrower],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static completeP2pLoanPurchase(args: MethodArgs<'complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.loanKey, args.completionArgs, args.principalAsset, args.borrower, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the initiate_loan_repayment(byte[],string,axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initiateLoanRepayment(args: MethodArgs<'initiate_loan_repayment(byte[],string,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initiate_loan_repayment(byte[],string,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.loanKey, args.repaymentKey, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static executeLoanRepayment(args: MethodArgs<'execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.repaymentKey, args.recipientAccount, args.paymentRecipient, args.principalAsset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the clean_up_loan_repayment(string,account)(bool) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cleanUpLoanRepayment(args: MethodArgs<'clean_up_loan_repayment(string,account)(bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'clean_up_loan_repayment(string,account)(bool)' as const,
      methodArgs: Array.isArray(args) ? args : [args.repaymentKey, args.borrowerAccount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the create()bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  // @ts-ignore
  static create(args: MethodArgs<'create()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create()bool' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the opt_contract_into_asset(asset)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optContractIntoAsset(args: MethodArgs<'opt_contract_into_asset(asset)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'opt_contract_into_asset(asset)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ZaibatsuLoan smart contract
 */
export class ZaibatsuLoanClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ZaibatsuLoanClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if (result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
    return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ZaibatsuLoan['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ZaibatsuLoan smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ZaibatsuLoanDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ZaibatsuLoanCallFactory.create)
    const updateArgs = params.updateCall?.(ZaibatsuLoanCallFactory.update)
    const deleteArgs = params.deleteCall?.(ZaibatsuLoanCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  // @ts-ignore
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ZaibatsuLoan smart contract using the create()bool ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async create(args: MethodArgs<'create()bool'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'create()bool'>, AppCreateCallTransactionResult>(await $this.appClient.create(ZaibatsuLoanCallFactory.create.create(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the ZaibatsuLoan smart contract using the update()bool ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async update(args: MethodArgs<'update()bool'>, params: AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'update()bool'>, AppUpdateCallTransactionResult>(await $this.appClient.update(ZaibatsuLoanCallFactory.update.update(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the ZaibatsuLoan smart contract using the delete()bool ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async delete(args: MethodArgs<'delete()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'delete()bool'>>(await $this.appClient.delete(ZaibatsuLoanCallFactory.delete.delete(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ZaibatsuLoan smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initiateLoanPurchase(args: MethodArgs<'initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuLoanCallFactory.initiateLoanPurchase(args, params), LoanDetails)
  }

  /**
   * Calls the complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public completeNonP2pLoanPurchase(args: MethodArgs<'complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuLoanCallFactory.completeNonP2pLoanPurchase(args, params), LoanDetails)
  }

  /**
   * Calls the complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public completeP2pLoanPurchase(args: MethodArgs<'complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuLoanCallFactory.completeP2pLoanPurchase(args, params), LoanDetails)
  }

  /**
   * Calls the initiate_loan_repayment(byte[],string,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initiateLoanRepayment(args: MethodArgs<'initiate_loan_repayment(byte[],string,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuLoanCallFactory.initiateLoanRepayment(args, params))
  }

  /**
   * Calls the execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public executeLoanRepayment(args: MethodArgs<'execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuLoanCallFactory.executeLoanRepayment(args, params), ExecuteLoanRepaymentResponse)
  }

  /**
   * Calls the clean_up_loan_repayment(string,account)(bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cleanUpLoanRepayment(args: MethodArgs<'clean_up_loan_repayment(string,account)(bool)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuLoanCallFactory.cleanUpLoanRepayment(args, params), CleanUpLoanRepaymentResponse)
  }

  /**
   * Calls the create()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  // @ts-ignore
  public create(args: MethodArgs<'create()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    // @ts-ignore
    return this.call(ZaibatsuLoanCallFactory.create(args, params))
  }

  /**
   * Calls the opt_contract_into_asset(asset)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optContractIntoAsset(args: MethodArgs<'opt_contract_into_asset(asset)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ZaibatsuLoanCallFactory.optContractIntoAsset(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ZaibatsuLoan['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get admins() {
        return ZaibatsuLoanClient.getBinaryState(state, 'admins')
      },
      get serviceContract() {
        return ZaibatsuLoanClient.getBinaryState(state, 'service_contract')
      },
    }
  }

  public compose(): ZaibatsuLoanComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain: Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      initiateLoanPurchase(args: MethodArgs<'initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initiateLoanPurchase(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(LoanDetails)
        return this
      },
      completeNonP2pLoanPurchase(args: MethodArgs<'complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.completeNonP2pLoanPurchase(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(LoanDetails)
        return this
      },
      completeP2pLoanPurchase(args: MethodArgs<'complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.completeP2pLoanPurchase(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(LoanDetails)
        return this
      },
      initiateLoanRepayment(args: MethodArgs<'initiate_loan_repayment(byte[],string,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initiateLoanRepayment(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      executeLoanRepayment(args: MethodArgs<'execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.executeLoanRepayment(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(ExecuteLoanRepaymentResponse)
        return this
      },
      cleanUpLoanRepayment(args: MethodArgs<'clean_up_loan_repayment(string,account)(bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cleanUpLoanRepayment(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(CleanUpLoanRepaymentResponse)
        return this
      },
      create(args: MethodArgs<'create()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        // @ts-ignore
        promiseChain = promiseChain.then(() => client.create(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      optContractIntoAsset(args: MethodArgs<'opt_contract_into_asset(asset)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optContractIntoAsset(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          update(args: MethodArgs<'update()bool'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.update(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          delete(args: MethodArgs<'delete()bool'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.delete(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ZaibatsuLoanComposer
  }
}
export type ZaibatsuLoanComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initiateLoanPurchase(args: MethodArgs<'initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'initiate_loan_purchase(byte[],application,(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64),axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>]>

  /**
   * Calls the complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeNonP2pLoanPurchase(args: MethodArgs<'complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'complete_non_p2p_loan_purchase(byte[],(string,string,string,string),asset,account)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>]>

  /**
   * Calls the complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  completeP2pLoanPurchase(args: MethodArgs<'complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'complete_p2p_loan_purchase(byte[],(string,string,string,string),asset,account,axfer)(string,string,uint8,uint64,uint64,uint64,uint64,uint64,uint64,uint8,uint64,(uint64,address)[],bool,bool,uint8,address,uint64,uint64)'>]>

  /**
   * Calls the initiate_loan_repayment(byte[],string,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initiateLoanRepayment(args: MethodArgs<'initiate_loan_repayment(byte[],string,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'initiate_loan_repayment(byte[],string,axfer)void'>]>

  /**
   * Calls the execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeLoanRepayment(args: MethodArgs<'execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'execute_loan_repayment(string,account,(uint64,address),asset)(bool,uint64)'>]>

  /**
   * Calls the clean_up_loan_repayment(string,account)(bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cleanUpLoanRepayment(args: MethodArgs<'clean_up_loan_repayment(string,account)(bool)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'clean_up_loan_repayment(string,account)(bool)'>]>

  /**
   * Calls the create()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(args: MethodArgs<'create()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'create()bool'>]>

  /**
   * Calls the opt_contract_into_asset(asset)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optContractIntoAsset(args: MethodArgs<'opt_contract_into_asset(asset)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'opt_contract_into_asset(asset)bool'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the ZaibatsuLoan smart contract using the update()bool ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(args: MethodArgs<'update()bool'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'update()bool'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the ZaibatsuLoan smart contract using the delete()bool ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(args: MethodArgs<'delete()bool'>, params?: AppClientComposeCallCoreParams): ZaibatsuLoanComposer<[...TReturns, MethodReturn<'delete()bool'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the ZaibatsuLoan smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): ZaibatsuLoanComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ZaibatsuLoanComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<ZaibatsuLoanComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<ZaibatsuLoanComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type ZaibatsuLoanComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type ZaibatsuLoanComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
